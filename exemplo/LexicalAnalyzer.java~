/* The following code was generated by JFlex 1.6.1 */

package analisadorLexico;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/JulhoFamilia/Desktop/PROG/src/ifce/lexico/exemplo/language.lex</tt>
 */
class LexicalAnalyzer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\0\1\33\1\37\1\40\1\41\1\37\22\0\1\32\1\57"+
    "\1\35\2\0\1\53\1\60\1\34\1\44\1\45\1\55\1\53\1\42"+
    "\1\54\1\36\1\56\1\63\11\63\1\0\1\43\1\0\1\52\1\0"+
    "\2\0\22\62\1\31\7\62\1\46\1\0\1\47\1\0\1\62\1\0"+
    "\1\1\1\2\1\6\1\20\1\7\1\21\1\24\1\15\1\16\1\62"+
    "\1\13\1\11\1\22\1\12\1\10\1\25\1\62\1\5\1\3\1\4"+
    "\1\17\1\26\1\27\1\23\1\14\1\30\1\50\1\61\1\51\7\0"+
    "\1\40\u1fa2\0\1\40\1\40\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\22\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\4\15\1\16"+
    "\1\1\1\3\1\17\2\2\2\0\27\2\1\20\2\2"+
    "\1\21\13\2\2\0\1\22\1\23\5\0\1\24\5\0"+
    "\1\25\2\2\1\26\1\0\12\2\1\27\15\2\1\30"+
    "\2\2\1\31\4\2\1\21\13\2\1\32\16\0\1\33"+
    "\1\0\2\2\1\34\2\2\1\31\7\2\1\35\11\2"+
    "\1\0\13\2\10\0\1\25\1\2\1\0\6\2\1\27"+
    "\6\2\1\36\1\0\2\2\1\30\6\2\1\0\1\2"+
    "\1\0\6\2\1\0\1\34\5\2\1\37\1\2\1\40"+
    "\1\41\5\2\1\42\1\0\12\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\u0340\0\u0374\0\u03a8\0\u03dc\0\64\0\u0410\0\u0444\0\u0478"+
    "\0\64\0\64\0\64\0\64\0\64\0\u04ac\0\64\0\64"+
    "\0\64\0\u04e0\0\u0514\0\u0548\0\64\0\u057c\0\u05b0\0\u0514"+
    "\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750"+
    "\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0"+
    "\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90"+
    "\0\u0ac4\0\u0af8\0\u0b2c\0\u01d4\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc"+
    "\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c"+
    "\0\u0dd0\0\u0e04\0\u0e38\0\u0444\0\64\0\64\0\u0e6c\0\u0ea0"+
    "\0\u0ed4\0\u0f08\0\u0f3c\0\64\0\u0f70\0\u0fa4\0\u0fd8\0\u0478"+
    "\0\u100c\0\u1040\0\u1074\0\u10a8\0\u064c\0\u10dc\0\u1110\0\u1144"+
    "\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4"+
    "\0\u01d4\0\u1318\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450"+
    "\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u01d4\0\u15bc"+
    "\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u01d4\0\u1728"+
    "\0\u175c\0\u1790\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8"+
    "\0\u18fc\0\u1930\0\64\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34"+
    "\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4"+
    "\0\u1c08\0\64\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40"+
    "\0\u1d74\0\u1da8\0\u1ddc\0\u1e10\0\u1e44\0\u1e78\0\u1eac\0\u1ee0"+
    "\0\u01d4\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0\0\u1fe4\0\u2018\0\u204c"+
    "\0\u2080\0\u20b4\0\u20e8\0\u211c\0\u2150\0\u2184\0\u21b8\0\u21ec"+
    "\0\u2220\0\u2254\0\u2288\0\u22bc\0\u22f0\0\u2324\0\u2358\0\u238c"+
    "\0\u23c0\0\u23f4\0\u2428\0\u245c\0\u2490\0\u24c4\0\u100c\0\u24f8"+
    "\0\u252c\0\u2560\0\u2594\0\u25c8\0\u25fc\0\u2630\0\u2664\0\u2698"+
    "\0\u26cc\0\u2700\0\u2734\0\u2768\0\u279c\0\u27d0\0\u2804\0\u2838"+
    "\0\u286c\0\u28a0\0\u28d4\0\u2908\0\u293c\0\u2970\0\u29a4\0\u29d8"+
    "\0\u2a0c\0\u2a40\0\u2a74\0\u2aa8\0\u2adc\0\u2b10\0\u2b44\0\u2b78"+
    "\0\u2bac\0\u2be0\0\u2c14\0\u2c48\0\u2c7c\0\u2cb0\0\u2ce4\0\u2d18"+
    "\0\u2d4c\0\u01d4\0\u2d80\0\u01d4\0\64\0\u2db4\0\u2de8\0\u2e1c"+
    "\0\u2e50\0\u2e84\0\64\0\u2eb8\0\u2eec\0\u2f20\0\u2f54\0\u2f88"+
    "\0\u2fbc\0\u2ff0\0\u3024\0\u3058\0\u308c\0\u30c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\3\12\1\15\1\12\1\16\1\17"+
    "\2\12\1\20\1\21\1\22\1\23\1\12\1\24\2\25"+
    "\1\26\1\27\1\30\1\25\2\0\1\2\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\12\1\50\65\0"+
    "\1\12\1\51\1\52\26\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\4\12\1\55\2\12\1\56\3\12"+
    "\1\57\15\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\3\12\1\60\7\12\1\61\1\62\1\12\1\63"+
    "\7\12\1\64\2\12\12\0\1\53\1\0\1\54\12\0"+
    "\3\12\1\0\4\12\1\65\7\12\1\66\14\12\12\0"+
    "\1\53\1\0\1\54\12\0\3\12\1\0\6\12\1\67"+
    "\22\12\12\0\1\53\1\0\1\54\12\0\3\12\1\0"+
    "\1\70\6\12\1\71\1\72\3\12\1\73\14\12\12\0"+
    "\1\53\1\0\1\54\12\0\3\12\1\0\10\12\1\74"+
    "\1\75\10\12\1\76\6\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\31\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\7\12\1\77\21\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\1\0\1\100\5\12\1\101"+
    "\7\12\1\102\12\12\12\0\1\53\1\0\1\54\12\0"+
    "\3\12\1\0\11\12\1\103\6\12\1\104\1\105\7\12"+
    "\12\0\1\53\1\0\1\54\12\0\3\12\1\0\6\12"+
    "\1\106\1\107\21\12\12\0\1\53\1\0\1\54\12\0"+
    "\3\12\1\0\1\110\6\12\1\111\1\112\4\12\1\113"+
    "\13\12\12\0\1\53\1\0\1\54\12\0\3\12\1\0"+
    "\7\12\1\114\21\12\12\0\1\53\1\0\1\54\12\0"+
    "\3\12\1\0\1\115\3\12\1\116\11\12\1\117\12\12"+
    "\12\0\1\53\1\0\1\54\12\0\3\12\1\0\7\12"+
    "\1\120\21\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\14\12\1\121\14\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\3\12\1\122\25\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\40\123\1\0\23\123\35\124"+
    "\1\125\26\124\55\0\1\126\3\0\1\126\1\0\1\126"+
    "\1\0\31\127\2\0\1\130\1\131\1\132\11\0\1\133"+
    "\1\134\2\0\1\135\1\136\3\0\1\137\1\127\1\136"+
    "\55\0\1\50\3\0\1\50\1\0\1\50\36\0\1\140"+
    "\102\0\1\141\1\142\65\0\1\45\4\0\31\12\4\0"+
    "\1\140\5\0\1\53\1\0\1\54\12\0\3\12\1\0"+
    "\2\12\1\143\26\12\12\0\1\53\1\0\1\54\12\0"+
    "\3\12\1\0\2\12\1\144\26\12\12\0\1\53\1\0"+
    "\1\54\12\0\3\12\37\53\3\0\3\53\1\145\16\53"+
    "\55\0\1\146\3\0\1\146\1\0\1\146\1\0\6\12"+
    "\1\147\22\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\7\12\1\150\21\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\3\12\1\151\25\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\1\0\1\152\3\12\1\153"+
    "\24\12\12\0\1\53\1\0\1\54\12\0\3\12\1\0"+
    "\11\12\1\154\17\12\12\0\1\53\1\0\1\54\12\0"+
    "\3\12\1\0\7\12\1\155\21\12\12\0\1\53\1\0"+
    "\1\54\12\0\3\12\1\0\24\12\1\156\4\12\12\0"+
    "\1\53\1\0\1\54\12\0\3\12\1\0\15\12\1\157"+
    "\13\12\12\0\1\53\1\0\1\54\12\0\3\12\1\0"+
    "\1\160\12\12\1\161\2\12\1\162\12\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\1\0\4\12\1\163\10\12"+
    "\1\164\13\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\3\12\1\165\25\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\2\12\1\166\1\167\25\12\12\0"+
    "\1\53\1\0\1\54\12\0\3\12\1\0\11\12\1\170"+
    "\17\12\12\0\1\53\1\0\1\54\12\0\3\12\1\0"+
    "\1\171\30\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\1\172\30\12\12\0\1\53\1\0\1\54\12\0"+
    "\3\12\1\0\2\12\1\166\26\12\12\0\1\53\1\0"+
    "\1\54\12\0\3\12\1\0\16\12\1\173\12\12\12\0"+
    "\1\53\1\0\1\54\12\0\3\12\1\0\3\12\1\174"+
    "\25\12\12\0\1\53\1\0\1\54\12\0\3\12\1\0"+
    "\11\12\1\175\17\12\12\0\1\53\1\0\1\54\12\0"+
    "\3\12\1\0\3\12\1\176\25\12\12\0\1\53\1\0"+
    "\1\54\12\0\3\12\1\0\26\12\1\177\2\12\12\0"+
    "\1\53\1\0\1\54\12\0\3\12\1\0\10\12\1\200"+
    "\20\12\12\0\1\53\1\0\1\54\12\0\3\12\1\0"+
    "\2\12\1\201\1\202\25\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\24\12\1\203\4\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\1\0\20\12\1\204\10\12"+
    "\12\0\1\53\1\0\1\54\12\0\3\12\1\0\16\12"+
    "\1\205\12\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\10\12\1\206\20\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\4\12\1\207\24\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\1\0\7\12\1\210\21\12"+
    "\12\0\1\53\1\0\1\54\12\0\3\12\1\0\11\12"+
    "\1\211\17\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\3\12\1\212\25\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\5\12\1\213\23\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\1\0\7\12\1\214\5\12"+
    "\1\215\13\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\1\12\1\216\27\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\10\12\1\217\4\12\1\220\13\12"+
    "\12\0\1\53\1\0\1\54\12\0\3\12\1\0\15\12"+
    "\1\221\13\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\4\12\1\222\24\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\34\0\1\223\30\0\31\127\1\224\7\0"+
    "\1\225\6\0\1\134\7\0\3\127\40\226\1\0\23\226"+
    "\35\131\1\227\26\131\55\0\1\227\3\0\1\227\1\0"+
    "\1\227\1\0\31\230\2\0\1\231\1\232\1\233\12\0"+
    "\1\234\2\0\1\235\1\236\3\0\1\237\1\230\1\236"+
    "\55\0\1\136\3\0\1\136\1\0\1\136\32\0\1\240"+
    "\3\0\1\132\3\0\1\241\6\0\1\242\13\0\31\127"+
    "\1\224\3\0\1\132\3\0\1\225\6\0\1\134\7\0"+
    "\3\127\37\141\3\0\13\141\1\243\6\141\37\142\3\0"+
    "\22\142\1\0\3\12\1\244\25\12\12\0\1\53\1\0"+
    "\1\54\12\0\3\12\1\0\6\12\1\245\22\12\12\0"+
    "\1\53\1\0\1\54\12\0\3\12\47\0\1\246\15\0"+
    "\1\247\30\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\10\12\1\250\20\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\6\12\1\251\22\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\1\0\3\12\1\252\25\12"+
    "\12\0\1\53\1\0\1\54\12\0\3\12\1\0\15\12"+
    "\1\253\13\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\5\12\1\254\23\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\4\12\1\255\24\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\1\0\6\12\1\256\22\12"+
    "\12\0\1\53\1\0\1\54\12\0\3\12\1\0\3\12"+
    "\1\257\25\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\11\12\1\260\17\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\6\12\1\261\22\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\1\0\7\12\1\262\21\12"+
    "\12\0\1\53\1\0\1\54\12\0\3\12\1\0\2\12"+
    "\1\177\26\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\16\12\1\263\12\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\6\12\1\104\22\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\1\0\5\12\1\264\23\12"+
    "\12\0\1\53\1\0\1\54\12\0\3\12\1\0\2\12"+
    "\1\265\1\266\25\12\12\0\1\53\1\0\1\54\12\0"+
    "\3\12\1\0\2\12\1\164\26\12\12\0\1\53\1\0"+
    "\1\54\12\0\3\12\1\0\4\12\1\251\24\12\12\0"+
    "\1\53\1\0\1\54\12\0\3\12\1\0\21\12\1\177"+
    "\7\12\12\0\1\53\1\0\1\54\12\0\3\12\1\0"+
    "\6\12\1\267\22\12\12\0\1\53\1\0\1\54\12\0"+
    "\3\12\1\0\23\12\1\251\5\12\12\0\1\53\1\0"+
    "\1\54\12\0\3\12\1\0\15\12\1\270\13\12\12\0"+
    "\1\53\1\0\1\54\12\0\3\12\1\0\10\12\1\261"+
    "\20\12\12\0\1\53\1\0\1\54\12\0\3\12\1\0"+
    "\3\12\1\271\25\12\12\0\1\53\1\0\1\54\12\0"+
    "\3\12\1\0\6\12\1\272\22\12\12\0\1\53\1\0"+
    "\1\273\12\0\3\12\1\0\7\12\1\245\1\274\20\12"+
    "\12\0\1\53\1\0\1\54\12\0\3\12\1\0\1\275"+
    "\30\12\12\0\1\53\1\0\1\54\12\0\3\12\1\0"+
    "\1\12\1\276\27\12\12\0\1\53\1\0\1\54\12\0"+
    "\3\12\1\0\2\12\1\162\26\12\12\0\1\53\1\0"+
    "\1\54\12\0\3\12\1\0\1\255\30\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\1\0\1\277\30\12\12\0"+
    "\1\53\1\0\1\54\12\0\3\12\1\0\7\12\1\177"+
    "\21\12\12\0\1\53\1\0\1\54\12\0\3\12\1\0"+
    "\12\12\1\300\16\12\12\0\1\53\1\0\1\54\12\0"+
    "\3\12\1\0\3\12\1\301\25\12\12\0\1\53\1\0"+
    "\1\54\12\0\3\12\1\0\25\12\1\302\3\12\12\0"+
    "\1\53\1\0\1\54\12\0\3\12\1\0\10\12\1\303"+
    "\20\12\12\0\1\53\1\0\1\54\12\0\3\12\1\0"+
    "\1\304\30\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\17\12\1\251\11\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\10\12\1\305\20\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\1\0\15\12\1\306\13\12"+
    "\12\0\1\53\1\0\1\54\12\0\3\12\32\0\1\224"+
    "\7\0\1\225\22\0\31\127\1\225\1\0\1\130\1\131"+
    "\1\132\11\0\1\133\3\0\1\135\1\136\3\0\1\137"+
    "\1\127\1\136\34\0\1\227\61\0\1\240\7\0\1\241"+
    "\6\0\1\242\13\0\31\230\1\307\7\0\1\310\6\0"+
    "\1\234\7\0\3\230\40\311\1\0\23\311\35\232\1\312"+
    "\26\232\55\0\1\312\3\0\1\312\1\0\1\312\32\0"+
    "\1\313\7\0\1\314\6\0\1\134\67\0\1\236\3\0"+
    "\1\236\1\0\1\236\32\0\1\307\3\0\1\233\3\0"+
    "\1\310\6\0\1\234\13\0\31\230\1\307\3\0\1\233"+
    "\3\0\1\310\6\0\1\234\7\0\3\230\32\0\1\240"+
    "\7\0\1\241\22\0\31\315\1\241\1\0\1\130\1\131"+
    "\1\132\15\0\1\135\1\136\3\0\1\316\1\315\1\136"+
    "\37\141\3\0\13\141\1\243\1\317\5\141\1\0\4\12"+
    "\1\320\24\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\4\12\1\265\24\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\46\0\1\321\16\0\12\12\1\177\16\12"+
    "\12\0\1\53\1\0\1\54\12\0\3\12\1\0\6\12"+
    "\1\322\22\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\31\12\12\0\1\53\1\0\1\273\12\0\3\12"+
    "\1\0\15\12\1\323\13\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\5\12\1\324\23\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\1\0\14\12\1\325\14\12"+
    "\12\0\1\53\1\0\1\54\12\0\3\12\1\0\3\12"+
    "\1\251\25\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\4\12\1\177\24\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\5\12\1\326\23\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\1\0\2\12\1\327\26\12"+
    "\12\0\1\53\1\0\1\54\12\0\3\12\1\0\26\12"+
    "\1\330\2\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\4\12\1\331\24\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\14\12\1\161\14\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\1\0\3\12\1\177\25\12"+
    "\12\0\1\53\1\0\1\54\12\0\3\12\1\0\15\12"+
    "\1\332\13\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\11\12\1\333\17\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\25\12\1\334\3\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\1\0\1\335\30\12\12\0"+
    "\1\53\1\0\1\54\12\0\3\12\1\0\4\12\1\336"+
    "\24\12\12\0\1\53\1\0\1\54\12\0\3\12\47\0"+
    "\1\337\5\0\1\340\3\0\1\340\1\0\1\340\1\0"+
    "\6\12\1\341\22\12\12\0\1\53\1\0\1\54\12\0"+
    "\3\12\1\0\16\12\1\342\12\12\12\0\1\53\1\0"+
    "\1\54\12\0\3\12\1\0\10\12\1\151\20\12\12\0"+
    "\1\53\1\0\1\54\12\0\3\12\1\0\10\12\1\343"+
    "\20\12\12\0\1\53\1\0\1\54\12\0\3\12\1\0"+
    "\1\344\30\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\6\12\1\345\22\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\1\346\30\12\12\0\1\53\1\0"+
    "\1\54\12\0\3\12\1\0\15\12\1\347\13\12\12\0"+
    "\1\53\1\0\1\54\12\0\3\12\1\0\3\12\1\350"+
    "\25\12\12\0\1\53\1\0\1\54\12\0\3\12\1\0"+
    "\6\12\1\207\22\12\12\0\1\53\1\0\1\54\12\0"+
    "\3\12\1\0\11\12\1\351\17\12\12\0\1\53\1\0"+
    "\1\54\12\0\3\12\32\0\1\307\7\0\1\310\22\0"+
    "\31\230\1\310\1\0\1\231\1\232\1\233\15\0\1\235"+
    "\1\236\3\0\1\237\1\230\1\236\34\0\1\312\61\0"+
    "\1\307\7\0\1\310\6\0\1\234\44\0\1\313\7\0"+
    "\1\314\22\0\31\352\1\314\15\0\1\133\10\0\2\352"+
    "\2\0\31\315\1\240\7\0\1\241\6\0\1\242\7\0"+
    "\3\315\1\0\31\315\1\240\3\0\1\132\3\0\1\241"+
    "\6\0\1\242\7\0\3\315\1\0\1\353\30\12\12\0"+
    "\1\53\1\0\1\54\12\0\3\12\55\0\1\354\3\0"+
    "\1\354\1\0\1\354\1\0\1\331\30\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\1\0\5\12\1\177\23\12"+
    "\12\0\1\53\1\0\1\54\12\0\3\12\1\0\3\12"+
    "\1\355\25\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\4\12\1\356\24\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\14\12\1\104\14\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\1\0\15\12\1\357\13\12"+
    "\12\0\1\53\1\0\1\54\12\0\3\12\1\0\2\12"+
    "\1\161\26\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\11\12\1\177\17\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\11\12\1\360\17\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\1\0\17\12\1\164\11\12"+
    "\12\0\1\53\1\0\1\54\12\0\3\12\1\0\6\12"+
    "\1\177\22\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\11\12\1\361\17\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\20\12\1\362\10\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\46\0\1\363\64\0\1\364"+
    "\15\0\21\12\1\365\7\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\10\12\1\366\20\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\1\0\10\12\1\367\20\12"+
    "\12\0\1\53\1\0\1\54\12\0\3\12\1\0\23\12"+
    "\1\334\5\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\5\12\1\370\23\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\3\12\1\371\25\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\1\0\5\12\1\372\23\12"+
    "\12\0\1\53\1\0\1\54\12\0\3\12\1\0\15\12"+
    "\1\373\13\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\23\12\1\374\5\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\31\352\1\313\7\0\1\314\6\0"+
    "\1\134\7\0\3\352\1\0\5\12\1\265\23\12\12\0"+
    "\1\53\1\0\1\54\12\0\3\12\47\0\1\375\15\0"+
    "\20\12\1\376\10\12\12\0\1\53\1\0\1\54\12\0"+
    "\3\12\1\0\7\12\1\377\21\12\12\0\1\53\1\0"+
    "\1\54\12\0\3\12\1\0\6\12\1\u0100\22\12\12\0"+
    "\1\53\1\0\1\54\12\0\3\12\1\0\16\12\1\334"+
    "\12\12\12\0\1\53\1\0\1\54\12\0\3\12\1\0"+
    "\5\12\1\u0101\23\12\12\0\1\53\1\0\1\54\12\0"+
    "\3\12\1\0\1\u0102\30\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\47\0\1\u0103\62\0\1\u0104\16\0\6\12"+
    "\1\u0105\22\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\3\12\1\372\25\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\13\12\1\161\15\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\1\0\3\12\1\u0106\25\12"+
    "\12\0\1\53\1\0\1\54\12\0\3\12\1\0\6\12"+
    "\1\372\22\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\10\12\1\334\20\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\24\12\1\177\4\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\1\0\11\12\1\u0107\17\12"+
    "\12\0\1\53\1\0\1\54\12\0\3\12\1\0\11\12"+
    "\1\265\17\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\6\12\1\u0108\22\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\5\12\1\334\23\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\47\0\1\u0103\5\0\1\354"+
    "\3\0\1\354\1\0\1\354\1\0\11\12\1\u0109\17\12"+
    "\12\0\1\53\1\0\1\54\12\0\3\12\1\0\6\12"+
    "\1\u010a\22\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\15\12\1\u010b\13\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\7\12\1\u010c\21\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\1\0\3\12\1\164\25\12"+
    "\12\0\1\53\1\0\1\54\12\0\3\12\1\0\17\12"+
    "\1\372\11\12\12\0\1\53\1\0\1\54\12\0\3\12"+
    "\1\0\27\12\1\u010d\1\12\12\0\1\53\1\0\1\54"+
    "\12\0\3\12\1\0\20\12\1\177\10\12\12\0\1\53"+
    "\1\0\1\54\12\0\3\12\1\0\6\12\1\u010e\22\12"+
    "\12\0\1\53\1\0\1\54\12\0\3\12\1\0\17\12"+
    "\1\177\11\12\12\0\1\53\1\0\1\54\12\0\3\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12532];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\22\1\1\11\3\1\5\11\1\1\3\11"+
    "\3\1\1\11\5\1\2\0\46\1\2\0\2\11\5\0"+
    "\1\11\5\0\4\1\1\0\54\1\1\11\16\0\1\11"+
    "\1\0\27\1\1\0\13\1\10\0\2\1\1\0\16\1"+
    "\1\0\11\1\1\0\1\1\1\0\6\1\1\0\11\1"+
    "\1\11\5\1\1\11\1\0\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

private void imprimir(String descricao, String lexema) {
    System.out.println(lexema + " - " + descricao);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Caractere inválido " + yytext());
            }
          case 35: break;
          case 2: 
            { imprimir("Identificador", yytext());
            }
          case 36: break;
          case 3: 
            { imprimir("Espaço em branco", yytext());
            }
          case 37: break;
          case 4: 
            { imprimir("Operador de ponto", yytext());
            }
          case 38: break;
          case 5: 
            { imprimir("Ponto e vírgula", yytext());
            }
          case 39: break;
          case 6: 
            { imprimir("Parêntese aberto", yytext());
            }
          case 40: break;
          case 7: 
            { imprimir("Parêntese fechado", yytext());
            }
          case 41: break;
          case 8: 
            { imprimir("Colchete aberto", yytext());
            }
          case 42: break;
          case 9: 
            { imprimir("Colchete fechado", yytext());
            }
          case 43: break;
          case 10: 
            { imprimir("Chave aberta", yytext());
            }
          case 44: break;
          case 11: 
            { imprimir("Chave fechada", yytext());
            }
          case 45: break;
          case 12: 
            { imprimir("Operador de atribuição", yytext());
            }
          case 46: break;
          case 13: 
            { imprimir("Operador aritmético", yytext());
            }
          case 47: break;
          case 14: 
            { imprimir("Operador lógico", yytext());
            }
          case 48: break;
          case 15: 
            { imprimir("Constante tipo número inteiro", yytext());
            }
          case 49: break;
          case 16: 
            { imprimir("Palavra reservada " + yytext() + " (desvio condicional)", yytext());
            }
          case 50: break;
          case 17: 
            { imprimir("Palavra reservada " + yytext() + " (loop)", yytext());
            }
          case 51: break;
          case 18: 
            { imprimir("Constante tipo string", yytext());
            }
          case 52: break;
          case 19: 
            { imprimir("Constante tipo float", yytext());
            }
          case 53: break;
          case 20: 
            { imprimir("Constante de uma matriz", yytext());
            }
          case 54: break;
          case 21: 
            { imprimir("Comentário", yytext());
            }
          case 55: break;
          case 22: 
            { imprimir("Método", yytext());
            }
          case 56: break;
          case 23: 
            { imprimir("Palavra reservada " + yytext() + " (exceção)", yytext());
            }
          case 57: break;
          case 24: 
            { imprimir("Palavra reservada " + yytext(), yytext());
            }
          case 58: break;
          case 25: 
            { imprimir("Palavra reservada " + yytext() + " (tipo)", yytext());
            }
          case 59: break;
          case 26: 
            { imprimir("Constante tipo char", yytext());
            }
          case 60: break;
          case 27: 
            { imprimir("Constante de um array", yytext());
            }
          case 61: break;
          case 28: 
            { imprimir("Posição do array", yytext());
            }
          case 62: break;
          case 29: 
            { imprimir("Palavra reservada " + yytext() + " (valor literal)", yytext());
            }
          case 63: break;
          case 30: 
            { imprimir("Declaração de array", yytext());
            }
          case 64: break;
          case 31: 
            { imprimir("Palavra reservada " + yytext() + " (modificador de acesso)", yytext());
            }
          case 65: break;
          case 32: 
            { imprimir("Tipo não primitivo " + yytext(), yytext());
            }
          case 66: break;
          case 33: 
            { imprimir("Posição da matriz", yytext());
            }
          case 67: break;
          case 34: 
            { imprimir("Declaração de matriz", yytext());
            }
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
