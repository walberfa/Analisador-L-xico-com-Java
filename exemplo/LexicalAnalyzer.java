/* The following code was generated by JFlex 1.6.1 */

package analisadorLexico;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/JulhoFamilia/Desktop/PROG/src/ifce/lexico/exemplo/language.lex</tt>
 */
class LexicalAnalyzer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\0\1\32\1\36\1\37\1\36\1\36\22\0\1\71\1\62"+
    "\1\34\2\0\1\57\1\63\1\33\1\44\1\45\1\55\1\53\1\40"+
    "\1\54\1\35\1\56\1\70\11\70\1\42\1\43\1\60\1\52\1\61"+
    "\1\41\1\0\22\67\1\31\7\67\1\46\1\0\1\47\1\66\1\67"+
    "\1\0\1\1\1\2\1\6\1\20\1\7\1\21\1\24\1\15\1\16"+
    "\1\67\1\13\1\11\1\22\1\12\1\10\1\25\1\67\1\5\1\3"+
    "\1\4\1\17\1\26\1\27\1\23\1\14\1\30\1\50\1\64\1\51"+
    "\1\65\6\0\1\37\32\0\1\32\u15df\0\1\32\u097f\0\13\32\35\0"+
    "\1\37\1\37\5\0\1\32\57\0\1\32\u0fa0\0\1\32\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\22\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\3\17\1\20\1\17\2\21\1\22\1\23\1\3\1\24"+
    "\1\23\1\25\2\2\2\0\27\2\1\26\2\2\1\27"+
    "\13\2\2\0\1\30\1\31\5\0\1\32\3\0\1\21"+
    "\1\16\1\0\2\20\2\33\1\22\1\3\2\2\1\34"+
    "\1\0\12\2\1\35\15\2\1\36\2\2\1\37\4\2"+
    "\1\27\13\2\1\40\15\0\1\41\2\0\1\20\2\2"+
    "\1\42\2\2\1\37\7\2\1\43\11\2\1\0\13\2"+
    "\11\0\1\2\1\0\6\2\1\35\6\2\1\44\1\0"+
    "\2\2\1\36\6\2\1\0\1\20\1\2\1\0\6\2"+
    "\1\0\1\42\5\2\1\45\1\2\1\46\1\47\5\2"+
    "\1\50\1\0\12\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536"+
    "\0\72\0\72\0\72\0\72\0\72\0\72\0\72\0\u0570"+
    "\0\72\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706"+
    "\0\u0740\0\u05aa\0\u077a\0\u07b4\0\72\0\u06cc\0\u07ee\0\u0828"+
    "\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8"+
    "\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8"+
    "\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98"+
    "\0\u0dd2\0\u0e0c\0\u020a\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e"+
    "\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe"+
    "\0\u1138\0\u1172\0\u04fc\0\72\0\72\0\u11ac\0\u11e6\0\u1220"+
    "\0\u125a\0\u1294\0\72\0\u12ce\0\u1308\0\u1342\0\72\0\72"+
    "\0\u0536\0\u137c\0\u13b6\0\u06cc\0\u13f0\0\72\0\u142a\0\u1464"+
    "\0\u149e\0\u089c\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa"+
    "\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u020a\0\u1756\0\u1790"+
    "\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960"+
    "\0\u199a\0\u19d4\0\u1a0e\0\u020a\0\u1a48\0\u1a82\0\u1abc\0\u1af6"+
    "\0\u1b30\0\u1b6a\0\u1ba4\0\u020a\0\u1bde\0\u1c18\0\u1c52\0\u1c8c"+
    "\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\72"+
    "\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2"+
    "\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114\0\72\0\u214e\0\u2188"+
    "\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358"+
    "\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4\0\u020a\0\u24ee"+
    "\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610\0\u264a\0\u2684\0\u26be"+
    "\0\u26f8\0\u2732\0\u276c\0\u27a6\0\u27e0\0\u281a\0\u2854\0\u288e"+
    "\0\u28c8\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e"+
    "\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e"+
    "\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe"+
    "\0\u2e38\0\u2e72\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94\0\u2fce"+
    "\0\u3008\0\u3042\0\u307c\0\u30b6\0\u30f0\0\u312a\0\u3164\0\u319e"+
    "\0\72\0\u31d8\0\u3212\0\u324c\0\u3286\0\u32c0\0\u32fa\0\u3334"+
    "\0\u336e\0\u33a8\0\u33e2\0\u341c\0\u3456\0\u3490\0\u34ca\0\u3504"+
    "\0\u020a\0\u353e\0\u020a\0\72\0\u3578\0\u35b2\0\u35ec\0\u3626"+
    "\0\u3660\0\72\0\u369a\0\u36d4\0\u370e\0\u3748\0\u3782\0\u37bc"+
    "\0\u37f6\0\u3830\0\u386a\0\u38a4\0\u38de";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\3\12\1\15\1\12\1\16\1\17"+
    "\2\12\1\20\1\21\1\22\1\23\1\12\1\24\1\25"+
    "\1\26\1\27\1\30\2\25\1\2\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\12\1\57\1\25\73\0\1\12"+
    "\1\60\1\61\26\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\4\12\1\64\2\12\1\65"+
    "\3\12\1\66\15\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\3\12\1\67\7\12\1\70"+
    "\1\71\1\12\1\72\7\12\1\73\2\12\12\0\1\62"+
    "\1\0\1\63\15\0\1\12\2\0\2\12\2\0\4\12"+
    "\1\74\7\12\1\75\14\12\12\0\1\62\1\0\1\63"+
    "\15\0\1\12\2\0\2\12\2\0\6\12\1\76\22\12"+
    "\12\0\1\62\1\0\1\63\15\0\1\12\2\0\2\12"+
    "\2\0\1\77\6\12\1\100\1\101\3\12\1\102\14\12"+
    "\12\0\1\62\1\0\1\63\15\0\1\12\2\0\2\12"+
    "\2\0\10\12\1\103\1\104\10\12\1\105\6\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\31\12\12\0\1\62\1\0\1\63\15\0\1\12\2\0"+
    "\2\12\2\0\7\12\1\106\21\12\12\0\1\62\1\0"+
    "\1\63\15\0\1\12\2\0\2\12\2\0\1\107\5\12"+
    "\1\110\7\12\1\111\12\12\12\0\1\62\1\0\1\63"+
    "\15\0\1\12\2\0\2\12\2\0\11\12\1\112\6\12"+
    "\1\113\1\114\7\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\6\12\1\115\1\116\21\12"+
    "\12\0\1\62\1\0\1\63\15\0\1\12\2\0\2\12"+
    "\2\0\1\117\6\12\1\120\1\121\4\12\1\122\13\12"+
    "\12\0\1\62\1\0\1\63\15\0\1\12\2\0\2\12"+
    "\2\0\7\12\1\123\21\12\12\0\1\62\1\0\1\63"+
    "\15\0\1\12\2\0\2\12\2\0\1\124\3\12\1\125"+
    "\11\12\1\126\12\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\7\12\1\127\21\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\14\12\1\130\14\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\3\12\1\131\25\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\33\0"+
    "\1\25\3\0\2\25\24\0\1\25\4\0\1\25\37\132"+
    "\1\0\32\132\34\133\1\134\35\133\55\0\1\135\6\0"+
    "\1\135\3\0\1\135\2\0\31\136\1\0\1\137\1\140"+
    "\1\141\12\0\1\142\1\143\2\0\1\144\1\145\6\0"+
    "\1\146\2\0\1\136\1\145\53\0\1\147\71\0\1\150"+
    "\1\55\70\0\1\150\1\0\1\55\1\57\6\0\1\57"+
    "\3\0\1\57\36\0\1\151\14\0\1\150\17\0\36\152"+
    "\2\0\15\152\1\153\14\152\52\0\1\150\71\0\1\147"+
    "\5\0\1\154\63\0\1\147\6\0\1\155\62\0\1\150"+
    "\10\0\1\156\7\0\31\12\1\25\2\0\1\151\2\25"+
    "\4\0\1\62\1\0\1\63\3\0\1\150\11\0\1\157"+
    "\2\0\2\12\1\25\35\0\1\151\35\0\2\12\1\160"+
    "\26\12\12\0\1\62\1\0\1\63\15\0\1\12\2\0"+
    "\2\12\2\0\2\12\1\161\26\12\12\0\1\62\1\0"+
    "\1\63\15\0\1\12\2\0\2\12\1\0\36\62\2\0"+
    "\5\62\1\162\24\62\55\0\1\163\6\0\1\163\3\0"+
    "\1\163\2\0\6\12\1\164\22\12\12\0\1\62\1\0"+
    "\1\63\15\0\1\12\2\0\2\12\2\0\7\12\1\165"+
    "\21\12\12\0\1\62\1\0\1\63\15\0\1\12\2\0"+
    "\2\12\2\0\3\12\1\166\25\12\12\0\1\62\1\0"+
    "\1\63\15\0\1\12\2\0\2\12\2\0\1\167\3\12"+
    "\1\170\24\12\12\0\1\62\1\0\1\63\15\0\1\12"+
    "\2\0\2\12\2\0\11\12\1\171\17\12\12\0\1\62"+
    "\1\0\1\63\15\0\1\12\2\0\2\12\2\0\7\12"+
    "\1\172\21\12\12\0\1\62\1\0\1\63\15\0\1\12"+
    "\2\0\2\12\2\0\24\12\1\173\4\12\12\0\1\62"+
    "\1\0\1\63\15\0\1\12\2\0\2\12\2\0\15\12"+
    "\1\174\13\12\12\0\1\62\1\0\1\63\15\0\1\12"+
    "\2\0\2\12\2\0\1\175\12\12\1\176\2\12\1\177"+
    "\12\12\12\0\1\62\1\0\1\63\15\0\1\12\2\0"+
    "\2\12\2\0\4\12\1\200\10\12\1\201\13\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\3\12\1\202\25\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\2\12\1\203\1\204\25\12"+
    "\12\0\1\62\1\0\1\63\15\0\1\12\2\0\2\12"+
    "\2\0\11\12\1\205\17\12\12\0\1\62\1\0\1\63"+
    "\15\0\1\12\2\0\2\12\2\0\1\206\30\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\1\207\30\12\12\0\1\62\1\0\1\63\15\0\1\12"+
    "\2\0\2\12\2\0\2\12\1\203\26\12\12\0\1\62"+
    "\1\0\1\63\15\0\1\12\2\0\2\12\2\0\16\12"+
    "\1\210\12\12\12\0\1\62\1\0\1\63\15\0\1\12"+
    "\2\0\2\12\2\0\3\12\1\211\25\12\12\0\1\62"+
    "\1\0\1\63\15\0\1\12\2\0\2\12\2\0\11\12"+
    "\1\212\17\12\12\0\1\62\1\0\1\63\15\0\1\12"+
    "\2\0\2\12\2\0\3\12\1\213\25\12\12\0\1\62"+
    "\1\0\1\63\15\0\1\12\2\0\2\12\2\0\26\12"+
    "\1\214\2\12\12\0\1\62\1\0\1\63\15\0\1\12"+
    "\2\0\2\12\2\0\10\12\1\215\20\12\12\0\1\62"+
    "\1\0\1\63\15\0\1\12\2\0\2\12\2\0\2\12"+
    "\1\216\1\217\25\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\24\12\1\220\4\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\20\12\1\221\10\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\16\12\1\222\12\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\10\12\1\223\20\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\4\12\1\224\24\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\7\12\1\225\21\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\11\12\1\226\17\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\3\12\1\227\25\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\5\12\1\230\23\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\7\12\1\231\5\12\1\232\13\12\12\0\1\62\1\0"+
    "\1\63\15\0\1\12\2\0\2\12\2\0\1\12\1\233"+
    "\27\12\12\0\1\62\1\0\1\63\15\0\1\12\2\0"+
    "\2\12\2\0\10\12\1\234\4\12\1\235\13\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\15\12\1\236\13\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\4\12\1\237\24\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\34\0"+
    "\1\240\37\0\31\136\6\0\1\241\10\0\1\143\12\0"+
    "\1\136\2\0\2\136\1\242\37\243\1\0\32\243\34\140"+
    "\1\244\35\140\55\0\1\244\6\0\1\244\3\0\1\244"+
    "\2\0\31\245\1\0\1\246\1\247\1\250\13\0\1\251"+
    "\2\0\1\252\1\253\6\0\1\254\2\0\1\245\1\253"+
    "\56\0\1\145\6\0\1\145\3\0\1\145\36\0\1\141"+
    "\2\0\1\255\10\0\1\256\17\0\1\257\1\0\31\136"+
    "\3\0\1\141\2\0\1\241\10\0\1\143\12\0\1\136"+
    "\2\0\2\136\1\242\36\152\2\0\32\152\36\153\2\260"+
    "\15\153\1\261\14\153\52\0\1\150\6\0\1\154\11\0"+
    "\31\12\1\25\3\0\2\25\4\0\1\62\1\0\1\63"+
    "\15\0\1\157\2\0\2\12\1\25\1\0\3\12\1\262"+
    "\25\12\12\0\1\62\1\0\1\63\15\0\1\12\2\0"+
    "\2\12\2\0\6\12\1\263\22\12\12\0\1\62\1\0"+
    "\1\63\15\0\1\12\2\0\2\12\50\0\1\264\23\0"+
    "\1\265\30\12\12\0\1\62\1\0\1\63\15\0\1\12"+
    "\2\0\2\12\2\0\10\12\1\266\20\12\12\0\1\62"+
    "\1\0\1\63\15\0\1\12\2\0\2\12\2\0\6\12"+
    "\1\267\22\12\12\0\1\62\1\0\1\63\15\0\1\12"+
    "\2\0\2\12\2\0\3\12\1\270\25\12\12\0\1\62"+
    "\1\0\1\63\15\0\1\12\2\0\2\12\2\0\15\12"+
    "\1\271\13\12\12\0\1\62\1\0\1\63\15\0\1\12"+
    "\2\0\2\12\2\0\5\12\1\272\23\12\12\0\1\62"+
    "\1\0\1\63\15\0\1\12\2\0\2\12\2\0\4\12"+
    "\1\273\24\12\12\0\1\62\1\0\1\63\15\0\1\12"+
    "\2\0\2\12\2\0\6\12\1\274\22\12\12\0\1\62"+
    "\1\0\1\63\15\0\1\12\2\0\2\12\2\0\3\12"+
    "\1\275\25\12\12\0\1\62\1\0\1\63\15\0\1\12"+
    "\2\0\2\12\2\0\11\12\1\276\17\12\12\0\1\62"+
    "\1\0\1\63\15\0\1\12\2\0\2\12\2\0\6\12"+
    "\1\277\22\12\12\0\1\62\1\0\1\63\15\0\1\12"+
    "\2\0\2\12\2\0\7\12\1\300\21\12\12\0\1\62"+
    "\1\0\1\63\15\0\1\12\2\0\2\12\2\0\2\12"+
    "\1\214\26\12\12\0\1\62\1\0\1\63\15\0\1\12"+
    "\2\0\2\12\2\0\16\12\1\301\12\12\12\0\1\62"+
    "\1\0\1\63\15\0\1\12\2\0\2\12\2\0\6\12"+
    "\1\113\22\12\12\0\1\62\1\0\1\63\15\0\1\12"+
    "\2\0\2\12\2\0\5\12\1\302\23\12\12\0\1\62"+
    "\1\0\1\63\15\0\1\12\2\0\2\12\2\0\2\12"+
    "\1\303\1\304\25\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\2\12\1\201\26\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\4\12\1\267\24\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\21\12\1\214\7\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\6\12\1\305\22\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\23\12\1\267\5\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\15\12\1\306\13\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\10\12\1\277\20\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\3\12\1\307\25\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\6\12\1\310\22\12\12\0"+
    "\1\62\1\0\1\311\15\0\1\12\2\0\2\12\2\0"+
    "\7\12\1\263\1\312\20\12\12\0\1\62\1\0\1\63"+
    "\15\0\1\12\2\0\2\12\2\0\1\313\30\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\1\12\1\314\27\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\2\12\1\177\26\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\1\273\30\12\12\0\1\62\1\0\1\63\15\0\1\12"+
    "\2\0\2\12\2\0\1\315\30\12\12\0\1\62\1\0"+
    "\1\63\15\0\1\12\2\0\2\12\2\0\7\12\1\214"+
    "\21\12\12\0\1\62\1\0\1\63\15\0\1\12\2\0"+
    "\2\12\2\0\12\12\1\316\16\12\12\0\1\62\1\0"+
    "\1\63\15\0\1\12\2\0\2\12\2\0\3\12\1\317"+
    "\25\12\12\0\1\62\1\0\1\63\15\0\1\12\2\0"+
    "\2\12\2\0\25\12\1\320\3\12\12\0\1\62\1\0"+
    "\1\63\15\0\1\12\2\0\2\12\2\0\10\12\1\321"+
    "\20\12\12\0\1\62\1\0\1\63\15\0\1\12\2\0"+
    "\2\12\2\0\1\322\30\12\12\0\1\62\1\0\1\63"+
    "\15\0\1\12\2\0\2\12\2\0\17\12\1\267\11\12"+
    "\12\0\1\62\1\0\1\63\15\0\1\12\2\0\2\12"+
    "\2\0\10\12\1\323\20\12\12\0\1\62\1\0\1\63"+
    "\15\0\1\12\2\0\2\12\2\0\15\12\1\324\13\12"+
    "\12\0\1\62\1\0\1\63\15\0\1\12\2\0\2\12"+
    "\2\0\31\136\1\0\1\137\1\140\1\141\12\0\1\142"+
    "\3\0\1\144\1\145\6\0\1\146\2\0\1\136\1\145"+
    "\1\241\40\0\1\241\30\0\1\242\33\0\1\244\76\0"+
    "\1\255\10\0\1\256\17\0\1\257\1\0\31\245\6\0"+
    "\1\325\10\0\1\251\12\0\1\245\2\0\2\245\1\326"+
    "\37\327\1\0\32\327\34\247\1\330\35\247\55\0\1\330"+
    "\6\0\1\330\3\0\1\330\41\0\1\331\10\0\1\143"+
    "\17\0\1\332\55\0\1\253\6\0\1\253\3\0\1\253"+
    "\36\0\1\250\2\0\1\325\10\0\1\251\17\0\1\326"+
    "\1\0\31\245\3\0\1\250\2\0\1\325\10\0\1\251"+
    "\12\0\1\245\2\0\2\245\1\326\1\0\31\333\1\0"+
    "\1\137\1\140\1\141\16\0\1\144\1\145\6\0\1\334"+
    "\2\0\1\333\1\145\1\255\40\0\1\255\30\0\1\257"+
    "\55\260\1\335\14\260\36\153\2\260\15\153\1\261\1\152"+
    "\13\153\1\0\4\12\1\336\24\12\12\0\1\62\1\0"+
    "\1\63\15\0\1\12\2\0\2\12\2\0\4\12\1\303"+
    "\24\12\12\0\1\62\1\0\1\63\15\0\1\12\2\0"+
    "\2\12\47\0\1\337\24\0\12\12\1\214\16\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\6\12\1\340\22\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\31\12\12\0\1\62\1\0"+
    "\1\311\15\0\1\12\2\0\2\12\2\0\15\12\1\341"+
    "\13\12\12\0\1\62\1\0\1\63\15\0\1\12\2\0"+
    "\2\12\2\0\5\12\1\342\23\12\12\0\1\62\1\0"+
    "\1\63\15\0\1\12\2\0\2\12\2\0\14\12\1\343"+
    "\14\12\12\0\1\62\1\0\1\63\15\0\1\12\2\0"+
    "\2\12\2\0\3\12\1\267\25\12\12\0\1\62\1\0"+
    "\1\63\15\0\1\12\2\0\2\12\2\0\4\12\1\214"+
    "\24\12\12\0\1\62\1\0\1\63\15\0\1\12\2\0"+
    "\2\12\2\0\5\12\1\344\23\12\12\0\1\62\1\0"+
    "\1\63\15\0\1\12\2\0\2\12\2\0\2\12\1\345"+
    "\26\12\12\0\1\62\1\0\1\63\15\0\1\12\2\0"+
    "\2\12\2\0\26\12\1\346\2\12\12\0\1\62\1\0"+
    "\1\63\15\0\1\12\2\0\2\12\2\0\4\12\1\347"+
    "\24\12\12\0\1\62\1\0\1\63\15\0\1\12\2\0"+
    "\2\12\2\0\14\12\1\176\14\12\12\0\1\62\1\0"+
    "\1\63\15\0\1\12\2\0\2\12\2\0\3\12\1\214"+
    "\25\12\12\0\1\62\1\0\1\63\15\0\1\12\2\0"+
    "\2\12\2\0\15\12\1\350\13\12\12\0\1\62\1\0"+
    "\1\63\15\0\1\12\2\0\2\12\2\0\11\12\1\351"+
    "\17\12\12\0\1\62\1\0\1\63\15\0\1\12\2\0"+
    "\2\12\2\0\25\12\1\352\3\12\12\0\1\62\1\0"+
    "\1\63\15\0\1\12\2\0\2\12\2\0\1\353\30\12"+
    "\12\0\1\62\1\0\1\63\15\0\1\12\2\0\2\12"+
    "\2\0\4\12\1\354\24\12\12\0\1\62\1\0\1\63"+
    "\15\0\1\12\2\0\2\12\50\0\1\355\5\0\1\356"+
    "\6\0\1\356\3\0\1\356\2\0\6\12\1\357\22\12"+
    "\12\0\1\62\1\0\1\63\15\0\1\12\2\0\2\12"+
    "\2\0\16\12\1\360\12\12\12\0\1\62\1\0\1\63"+
    "\15\0\1\12\2\0\2\12\2\0\10\12\1\166\20\12"+
    "\12\0\1\62\1\0\1\63\15\0\1\12\2\0\2\12"+
    "\2\0\10\12\1\361\20\12\12\0\1\62\1\0\1\63"+
    "\15\0\1\12\2\0\2\12\2\0\1\362\30\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\6\12\1\363\22\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\1\364\30\12\12\0\1\62"+
    "\1\0\1\63\15\0\1\12\2\0\2\12\2\0\15\12"+
    "\1\365\13\12\12\0\1\62\1\0\1\63\15\0\1\12"+
    "\2\0\2\12\2\0\3\12\1\366\25\12\12\0\1\62"+
    "\1\0\1\63\15\0\1\12\2\0\2\12\2\0\6\12"+
    "\1\224\22\12\12\0\1\62\1\0\1\63\15\0\1\12"+
    "\2\0\2\12\2\0\11\12\1\367\17\12\12\0\1\62"+
    "\1\0\1\63\15\0\1\12\2\0\2\12\2\0\31\245"+
    "\1\0\1\246\1\247\1\250\16\0\1\252\1\253\6\0"+
    "\1\254\2\0\1\245\1\253\1\325\40\0\1\325\30\0"+
    "\1\326\33\0\1\330\76\0\1\325\10\0\1\251\17\0"+
    "\1\326\1\0\31\370\16\0\1\142\13\0\1\370\2\0"+
    "\1\370\1\0\1\331\40\0\1\331\30\0\1\332\1\0"+
    "\31\333\6\0\1\255\10\0\1\256\12\0\1\333\2\0"+
    "\2\333\1\257\1\0\31\333\3\0\1\141\2\0\1\255"+
    "\10\0\1\256\12\0\1\333\2\0\2\333\1\257\55\260"+
    "\1\335\1\371\13\260\1\0\1\372\30\12\12\0\1\62"+
    "\1\0\1\63\15\0\1\12\2\0\2\12\56\0\1\373"+
    "\6\0\1\373\3\0\1\373\2\0\1\347\30\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\5\12\1\214\23\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\3\12\1\374\25\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\4\12\1\375\24\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\14\12\1\113\14\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\15\12\1\376\13\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\2\12\1\176\26\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\11\12\1\214\17\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\11\12\1\377\17\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\17\12\1\201\11\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\6\12\1\214\22\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\11\12\1\u0100\17\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\20\12\1\u0101\10\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\47\0"+
    "\1\u0102\72\0\1\u0103\23\0\21\12\1\u0104\7\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\10\12\1\u0105\20\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\10\12\1\u0106\20\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\23\12\1\352\5\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\5\12\1\u0107\23\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\3\12\1\u0108\25\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\5\12\1\u0109\23\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\15\12\1\u010a\13\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\23\12\1\u010b\5\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\31\370\6\0\1\331\10\0\1\143\12\0\1\370\2\0"+
    "\2\370\1\332\1\0\5\12\1\303\23\12\12\0\1\62"+
    "\1\0\1\63\15\0\1\12\2\0\2\12\50\0\1\u010c"+
    "\23\0\20\12\1\u010d\10\12\12\0\1\62\1\0\1\63"+
    "\15\0\1\12\2\0\2\12\2\0\7\12\1\u010e\21\12"+
    "\12\0\1\62\1\0\1\63\15\0\1\12\2\0\2\12"+
    "\2\0\6\12\1\u010f\22\12\12\0\1\62\1\0\1\63"+
    "\15\0\1\12\2\0\2\12\2\0\16\12\1\352\12\12"+
    "\12\0\1\62\1\0\1\63\15\0\1\12\2\0\2\12"+
    "\2\0\5\12\1\u0110\23\12\12\0\1\62\1\0\1\63"+
    "\15\0\1\12\2\0\2\12\2\0\1\u0111\30\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\50\0"+
    "\1\u0112\70\0\1\u0113\24\0\6\12\1\u0114\22\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\3\12\1\u0109\25\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\13\12\1\176\15\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\3\12\1\u0115\25\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\6\12\1\u0109\22\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\10\12\1\352\20\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\24\12\1\214\4\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\11\12\1\u0116\17\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\11\12\1\303\17\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\6\12\1\u0117\22\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\5\12\1\352\23\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\50\0"+
    "\1\u0112\5\0\1\373\6\0\1\373\3\0\1\373\2\0"+
    "\11\12\1\u0118\17\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\6\12\1\u0119\22\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\15\12\1\u011a\13\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\7\12\1\u011b\21\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\3\12\1\201\25\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\17\12\1\u0109\11\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\27\12\1\u011c\1\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\20\12\1\214\10\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\2\0"+
    "\6\12\1\u011d\22\12\12\0\1\62\1\0\1\63\15\0"+
    "\1\12\2\0\2\12\2\0\17\12\1\214\11\12\12\0"+
    "\1\62\1\0\1\63\15\0\1\12\2\0\2\12\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14616];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\26\1\7\11\1\1\1\11\13\1\1\11"+
    "\4\1\2\0\46\1\2\0\2\11\5\0\1\11\3\0"+
    "\2\11\1\0\4\1\1\11\4\1\1\0\54\1\1\11"+
    "\15\0\1\11\2\0\30\1\1\0\13\1\11\0\1\1"+
    "\1\0\16\1\1\0\11\1\1\0\1\11\1\1\1\0"+
    "\6\1\1\0\11\1\1\11\5\1\1\11\1\0\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

private void imprimir(String descricao, String lexema) {
    System.out.println(lexema + " - " + descricao);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 210) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Caractere inválido " + yytext());
            }
          case 41: break;
          case 2: 
            { imprimir("Identificador", yytext());
            }
          case 42: break;
          case 3: 
            { imprimir("Espaço em branco", yytext());
            }
          case 43: break;
          case 4: 
            { imprimir("Separador ponto", yytext());
            }
          case 44: break;
          case 5: 
            { imprimir("Operador ternário", yytext());
            }
          case 45: break;
          case 6: 
            { imprimir("Separador dois-pontos", yytext());
            }
          case 46: break;
          case 7: 
            { imprimir("Separador ponto e vírgula", yytext());
            }
          case 47: break;
          case 8: 
            { imprimir("Parêntese aberto", yytext());
            }
          case 48: break;
          case 9: 
            { imprimir("Parêntese fechado", yytext());
            }
          case 49: break;
          case 10: 
            { imprimir("Colchete aberto", yytext());
            }
          case 50: break;
          case 11: 
            { imprimir("Colchete fechado", yytext());
            }
          case 51: break;
          case 12: 
            { imprimir("Chave aberta", yytext());
            }
          case 52: break;
          case 13: 
            { imprimir("Chave fechada", yytext());
            }
          case 53: break;
          case 14: 
            { imprimir("Operador de atribuição", yytext());
            }
          case 54: break;
          case 15: 
            { imprimir("Operador aritmético", yytext());
            }
          case 55: break;
          case 16: 
            { imprimir("Comentário", yytext());
            }
          case 56: break;
          case 17: 
            { imprimir("Operador comparativo", yytext());
            }
          case 57: break;
          case 18: 
            { imprimir("Operador lógico", yytext());
            }
          case 58: break;
          case 19: 
            { imprimir("Operador de bits", yytext());
            }
          case 59: break;
          case 20: 
            { imprimir("Operador unário", yytext());
            }
          case 60: break;
          case 21: 
            { imprimir("Constante tipo número inteiro", yytext());
            }
          case 61: break;
          case 22: 
            { imprimir("Palavra reservada " + yytext() + " (desvio condicional)", yytext());
            }
          case 62: break;
          case 23: 
            { imprimir("Palavra reservada " + yytext() + " (loop)", yytext());
            }
          case 63: break;
          case 24: 
            { imprimir("Constante tipo string", yytext());
            }
          case 64: break;
          case 25: 
            { imprimir("Constante tipo float", yytext());
            }
          case 65: break;
          case 26: 
            { imprimir("Constante de uma matriz", yytext());
            }
          case 66: break;
          case 27: 
            { imprimir("Operador de shift", yytext());
            }
          case 67: break;
          case 28: 
            { imprimir("Método", yytext());
            }
          case 68: break;
          case 29: 
            { imprimir("Palavra reservada " + yytext() + " (exceção)", yytext());
            }
          case 69: break;
          case 30: 
            { imprimir("Palavra reservada " + yytext(), yytext());
            }
          case 70: break;
          case 31: 
            { imprimir("Palavra reservada " + yytext() + " (tipo)", yytext());
            }
          case 71: break;
          case 32: 
            { imprimir("Constante tipo char", yytext());
            }
          case 72: break;
          case 33: 
            { imprimir("Constante de um array", yytext());
            }
          case 73: break;
          case 34: 
            { imprimir("Posição do array", yytext());
            }
          case 74: break;
          case 35: 
            { imprimir("Palavra reservada " + yytext() + " (valor literal)", yytext());
            }
          case 75: break;
          case 36: 
            { imprimir("Declaração de array", yytext());
            }
          case 76: break;
          case 37: 
            { imprimir("Palavra reservada " + yytext() + " (modificador de acesso)", yytext());
            }
          case 77: break;
          case 38: 
            { imprimir("Tipo não primitivo " + yytext(), yytext());
            }
          case 78: break;
          case 39: 
            { imprimir("Posição da matriz", yytext());
            }
          case 79: break;
          case 40: 
            { imprimir("Declaração de matriz", yytext());
            }
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
