// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: language.lex

package analisadorLexico;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class LexicalAnalyzer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\2\22\0\1\4\1\5"+
    "\1\6\2\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\12\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\0\22\31\1\32\7\31"+
    "\1\33\1\0\1\34\1\35\1\31\1\0\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\31"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\31\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\6\0\1\3\32\0\1\1"+
    "\u01df\0\1\1\177\0\13\1\35\0\2\3\5\0\1\1"+
    "\57\0\1\1\240\0\1\1\377\0\u0100\72";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\1\6\1\7\3\4\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\15\1\17\2\20\1\21\1\22\1\5"+
    "\20\20\1\23\1\2\1\24\1\25\1\15\1\0\1\26"+
    "\1\16\1\3\2\0\1\27\2\11\2\30\2\0\13\20"+
    "\1\31\10\20\1\32\23\20\10\0\1\33\1\2\1\34"+
    "\1\0\1\11\1\35\1\0\22\20\1\31\3\20\1\36"+
    "\2\20\1\37\20\20\1\40\3\20\4\0\1\41\13\0"+
    "\1\42\5\20\1\36\12\20\1\0\2\20\1\43\16\20"+
    "\10\0\1\11\1\0\6\20\1\37\2\20\1\0\1\44"+
    "\13\20\1\40\2\20\2\0\1\45\6\20\1\42\1\0"+
    "\3\20\1\46\4\20\1\47\2\20\1\0\1\50\15\20";

  private static int [] zzUnpackAction() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\73\0\73\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff"+
    "\0\73\0\73\0\u033a\0\261\0\u0375\0\73\0\u03b0\0\u03eb"+
    "\0\73\0\73\0\u0127\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512"+
    "\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea"+
    "\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\73\0\73\0\73"+
    "\0\354\0\73\0\73\0\73\0\u084c\0\u0289\0\73\0\u0887"+
    "\0\u08c2\0\u0127\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24"+
    "\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc"+
    "\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4"+
    "\0\u0e0f\0\u03b0\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71"+
    "\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149"+
    "\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321"+
    "\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\73\0\u1483\0\73"+
    "\0\u14be\0\u14f9\0\u0938\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620"+
    "\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8"+
    "\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u03b0\0\u1995"+
    "\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u03b0\0\u1af7\0\u1b32"+
    "\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a"+
    "\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u03b0\0\u1ea7"+
    "\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\73\0\u2044"+
    "\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c"+
    "\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4"+
    "\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591\0\u25cc"+
    "\0\u2607\0\u2642\0\u267d\0\u26b8\0\u26f3\0\u272e\0\u03b0\0\u2769"+
    "\0\u27a4\0\u27df\0\u281a\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941"+
    "\0\u297c\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19"+
    "\0\u2b54\0\u2b8f\0\u2bca\0\u2c05\0\u2c40\0\73\0\u2c7b\0\u2cb6"+
    "\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e"+
    "\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\u3066"+
    "\0\u30a1\0\u30dc\0\u3117\0\u3152\0\u318d\0\u31c8\0\u3203\0\u323e"+
    "\0\u3279\0\u32b4\0\u03b0\0\u32ef\0\u332a\0\u3365\0\u33a0\0\u33db"+
    "\0\u3416\0\u3451\0\u348c\0\u34c7\0\u3502\0\u353d\0\u03b0\0\u3578"+
    "\0\u35b3\0\u35ee\0\u3629\0\73\0\u3664\0\u369f\0\u36da\0\73"+
    "\0\u3715\0\u3750\0\u378b\0\u37c6\0\u3801\0\u383c\0\u3877\0\u38b2"+
    "\0\u38ed\0\u3928\0\u3963\0\u399e\0\u39d9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\2\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\27\1\43\1\27\1\44\1\27\1\45"+
    "\1\27\1\46\1\47\1\50\1\51\1\27\1\52\1\53"+
    "\3\27\1\54\1\55\1\56\1\57\75\0\4\3\62\0"+
    "\1\3\31\0\1\60\44\0\6\61\1\62\64\61\26\0"+
    "\1\63\54\0\1\64\15\0\1\63\44\0\3\65\1\0"+
    "\66\65\21\0\1\66\5\0\1\63\61\0\1\57\10\0"+
    "\1\63\60\0\1\20\2\0\1\57\2\0\1\20\3\0"+
    "\1\63\40\0\1\20\17\0\1\67\5\0\1\67\44\0"+
    "\1\67\3\0\2\70\2\0\10\70\1\71\55\70\21\0"+
    "\1\66\77\0\1\72\1\60\72\0\1\60\1\73\55\0"+
    "\1\74\7\0\1\27\6\0\2\27\1\75\2\0\30\27"+
    "\1\0\1\27\15\0\1\74\7\0\1\27\6\0\2\27"+
    "\1\75\2\0\21\27\1\76\6\27\1\0\1\27\15\0"+
    "\1\74\7\0\1\27\6\0\2\27\1\75\2\0\1\27"+
    "\1\77\16\27\1\100\7\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\15\27\1\101"+
    "\1\27\1\102\6\27\1\103\1\27\1\0\1\27\15\0"+
    "\1\74\7\0\1\27\6\0\2\27\1\75\2\0\1\104"+
    "\6\27\1\105\2\27\1\106\2\27\1\107\12\27\1\0"+
    "\1\27\15\0\1\74\7\0\1\27\6\0\2\27\1\75"+
    "\2\0\4\27\1\110\10\27\1\111\12\27\1\0\1\27"+
    "\15\0\1\74\7\0\1\27\6\0\2\27\1\75\2\0"+
    "\12\27\1\112\1\27\1\113\10\27\1\114\2\27\1\0"+
    "\1\27\15\0\1\74\7\0\1\27\6\0\2\27\1\75"+
    "\2\0\1\115\7\27\1\116\1\27\1\117\2\27\1\120"+
    "\12\27\1\0\1\27\15\0\1\74\7\0\1\27\6\0"+
    "\2\27\1\75\2\0\15\27\1\121\12\27\1\0\1\27"+
    "\15\0\1\74\7\0\1\27\6\0\2\27\1\75\2\0"+
    "\5\27\1\122\5\27\1\123\1\124\13\27\1\0\1\27"+
    "\15\0\1\74\7\0\1\27\6\0\2\27\1\75\2\0"+
    "\15\27\1\125\12\27\1\0\1\27\15\0\1\74\7\0"+
    "\1\27\6\0\2\27\1\75\2\0\1\126\3\27\1\127"+
    "\15\27\1\130\5\27\1\0\1\27\15\0\1\74\7\0"+
    "\1\27\6\0\2\27\1\75\2\0\1\131\16\27\1\132"+
    "\2\27\1\133\5\27\1\0\1\27\15\0\1\74\7\0"+
    "\1\27\6\0\2\27\1\75\2\0\4\27\1\134\23\27"+
    "\1\0\1\27\15\0\1\74\7\0\1\27\6\0\2\27"+
    "\1\75\2\0\7\27\1\135\11\27\1\136\1\137\1\27"+
    "\1\140\1\27\1\141\1\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\7\27\1\142"+
    "\7\27\1\143\10\27\1\0\1\27\15\0\1\74\7\0"+
    "\1\27\6\0\2\27\1\75\2\0\15\27\1\144\12\27"+
    "\1\0\1\27\15\0\1\74\7\0\1\27\6\0\2\27"+
    "\1\75\2\0\7\27\1\145\20\27\1\0\1\27\11\0"+
    "\1\146\2\0\1\147\2\0\1\150\2\0\1\151\1\152"+
    "\1\0\1\150\6\0\2\153\3\0\30\153\1\154\1\155"+
    "\1\156\3\0\4\3\5\0\1\74\5\0\1\66\1\0"+
    "\1\27\3\0\1\63\2\0\2\27\1\75\2\0\30\27"+
    "\1\0\1\157\14\0\1\160\61\0\2\70\2\0\66\70"+
    "\1\0\2\71\2\161\10\71\1\162\55\71\1\161\26\0"+
    "\1\63\1\72\43\0\2\74\2\0\7\74\1\163\56\74"+
    "\15\0\1\164\5\0\1\164\44\0\1\164\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\17\27\1\165"+
    "\10\27\1\0\1\27\15\0\1\74\7\0\1\27\6\0"+
    "\2\27\1\75\2\0\20\27\1\166\7\27\1\0\1\27"+
    "\15\0\1\74\7\0\1\27\6\0\2\27\1\75\2\0"+
    "\20\27\1\167\7\27\1\0\1\27\15\0\1\74\7\0"+
    "\1\27\6\0\2\27\1\75\2\0\15\27\1\170\12\27"+
    "\1\0\1\27\15\0\1\74\7\0\1\27\6\0\2\27"+
    "\1\75\2\0\4\27\1\171\23\27\1\0\1\27\15\0"+
    "\1\74\7\0\1\27\6\0\2\27\1\75\2\0\21\27"+
    "\1\172\6\27\1\0\1\27\15\0\1\74\7\0\1\27"+
    "\6\0\2\27\1\75\2\0\20\27\1\173\1\174\6\27"+
    "\1\0\1\27\15\0\1\74\7\0\1\27\6\0\2\27"+
    "\1\75\2\0\1\175\27\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\1\176\27\27"+
    "\1\0\1\27\15\0\1\74\7\0\1\27\6\0\2\27"+
    "\1\75\2\0\14\27\1\177\13\27\1\0\1\27\15\0"+
    "\1\74\7\0\1\27\6\0\2\27\1\75\2\0\5\27"+
    "\1\200\22\27\1\0\1\27\15\0\1\74\7\0\1\27"+
    "\6\0\2\27\1\75\2\0\22\27\1\201\5\27\1\0"+
    "\1\27\15\0\1\74\7\0\1\27\6\0\2\27\1\75"+
    "\2\0\20\27\1\173\7\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\22\27\1\202"+
    "\5\27\1\0\1\27\15\0\1\74\7\0\1\27\6\0"+
    "\2\27\1\75\2\0\21\27\1\203\6\27\1\0\1\27"+
    "\15\0\1\74\7\0\1\27\6\0\2\27\1\75\2\0"+
    "\12\27\1\204\15\27\1\0\1\27\15\0\1\74\7\0"+
    "\1\27\6\0\2\27\1\75\2\0\14\27\1\205\13\27"+
    "\1\0\1\27\15\0\1\74\7\0\1\27\6\0\2\27"+
    "\1\75\2\0\15\27\1\206\12\27\1\0\1\27\15\0"+
    "\1\74\7\0\1\27\6\0\2\27\1\75\2\0\17\27"+
    "\1\207\10\27\1\0\1\27\15\0\1\74\7\0\1\27"+
    "\6\0\2\27\1\75\2\0\21\27\1\210\6\27\1\0"+
    "\1\27\15\0\1\74\7\0\1\27\6\0\2\27\1\75"+
    "\2\0\16\27\1\211\11\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\20\27\1\212"+
    "\1\213\6\27\1\0\1\27\15\0\1\74\7\0\1\27"+
    "\6\0\2\27\1\75\2\0\14\27\1\214\13\27\1\0"+
    "\1\27\15\0\1\74\7\0\1\27\6\0\2\27\1\75"+
    "\2\0\21\27\1\215\6\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\24\27\1\216"+
    "\3\27\1\0\1\27\15\0\1\74\7\0\1\27\6\0"+
    "\2\27\1\75\2\0\12\27\1\217\15\27\1\0\1\27"+
    "\15\0\1\74\7\0\1\27\6\0\2\27\1\75\2\0"+
    "\2\27\1\220\25\27\1\0\1\27\15\0\1\74\7\0"+
    "\1\27\6\0\2\27\1\75\2\0\10\27\1\221\4\27"+
    "\1\222\12\27\1\0\1\27\15\0\1\74\7\0\1\27"+
    "\6\0\2\27\1\75\2\0\1\27\1\223\26\27\1\0"+
    "\1\27\15\0\1\74\7\0\1\27\6\0\2\27\1\75"+
    "\2\0\21\27\1\224\6\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\15\27\1\225"+
    "\12\27\1\0\1\27\15\0\1\74\7\0\1\27\6\0"+
    "\2\27\1\75\2\0\1\226\16\27\1\227\10\27\1\0"+
    "\1\27\15\0\1\74\7\0\1\27\6\0\2\27\1\75"+
    "\2\0\16\27\1\230\11\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\10\27\1\231"+
    "\17\27\1\0\1\27\15\0\1\74\7\0\1\27\6\0"+
    "\2\27\1\75\2\0\14\27\1\232\13\27\1\0\1\27"+
    "\15\0\1\74\7\0\1\27\6\0\2\27\1\75\2\0"+
    "\10\27\1\233\6\27\1\234\10\27\1\0\1\27\15\0"+
    "\1\74\7\0\1\27\6\0\2\27\1\75\2\0\1\235"+
    "\21\27\1\236\3\27\1\237\1\27\1\0\1\27\15\0"+
    "\1\74\7\0\1\27\6\0\2\27\1\75\2\0\10\27"+
    "\1\240\1\27\1\241\15\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\10\27\1\242"+
    "\17\27\1\0\1\27\3\0\6\146\1\243\64\146\3\244"+
    "\1\0\66\244\5\0\1\245\11\0\1\246\1\0\1\152"+
    "\47\0\1\247\16\0\1\150\5\0\1\150\44\0\1\150"+
    "\17\0\1\243\5\0\1\243\44\0\1\243\7\0\1\250"+
    "\11\0\1\251\3\0\1\153\6\0\2\153\3\0\30\153"+
    "\1\0\1\153\1\156\10\0\1\252\2\0\1\253\2\0"+
    "\1\254\2\0\1\255\1\256\1\0\1\254\6\0\2\257"+
    "\3\0\30\257\1\0\1\260\1\261\6\0\1\250\11\0"+
    "\1\251\1\0\1\152\1\0\1\153\6\0\2\153\3\0"+
    "\30\153\1\0\1\153\1\156\3\0\4\3\5\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\30\27\1\0"+
    "\1\157\3\0\14\161\1\262\56\161\2\71\2\161\10\71"+
    "\1\162\4\71\1\70\50\71\1\161\34\0\1\263\50\0"+
    "\1\74\7\0\1\27\6\0\2\27\1\75\2\0\10\27"+
    "\1\264\17\27\1\0\1\27\15\0\1\74\7\0\1\27"+
    "\6\0\2\27\1\75\2\0\21\27\1\265\6\27\1\0"+
    "\1\27\15\0\1\74\7\0\1\27\6\0\2\27\1\75"+
    "\2\0\4\27\1\266\23\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\12\27\1\267"+
    "\15\27\1\0\1\27\15\0\1\74\7\0\1\27\6\0"+
    "\2\27\1\75\2\0\1\270\27\27\1\0\1\27\15\0"+
    "\1\74\7\0\1\27\6\0\2\27\1\75\2\0\4\27"+
    "\1\271\23\27\1\0\1\27\15\0\1\74\7\0\1\27"+
    "\6\0\2\27\1\75\2\0\4\27\1\122\23\27\1\0"+
    "\1\27\15\0\1\74\7\0\1\27\6\0\2\27\1\75"+
    "\2\0\2\27\1\272\25\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\17\27\1\271"+
    "\10\27\1\0\1\27\15\0\1\74\7\0\1\27\6\0"+
    "\2\27\1\75\2\0\20\27\1\233\7\27\1\0\1\27"+
    "\15\0\1\74\7\0\1\27\6\0\2\27\1\75\2\0"+
    "\20\27\1\273\1\274\6\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\1\275\27\27"+
    "\1\0\1\27\15\0\1\74\7\0\1\27\6\0\2\27"+
    "\1\75\2\0\1\27\1\276\26\27\1\0\1\27\15\0"+
    "\1\74\7\0\1\27\6\0\2\27\1\75\2\0\13\27"+
    "\1\216\14\27\1\0\1\27\15\0\1\74\7\0\1\27"+
    "\6\0\2\27\1\75\2\0\4\27\1\277\23\27\1\0"+
    "\1\27\15\0\1\74\7\0\1\27\6\0\2\27\1\75"+
    "\2\0\20\27\1\236\7\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\1\300\27\27"+
    "\1\0\1\27\15\0\1\74\7\0\1\27\6\0\2\27"+
    "\1\75\2\0\1\301\27\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\15\27\1\216"+
    "\12\27\1\0\1\27\15\0\1\74\7\0\1\27\6\0"+
    "\2\27\1\75\2\0\12\27\1\302\2\27\1\266\12\27"+
    "\1\0\1\27\15\0\1\74\7\0\1\27\6\0\2\27"+
    "\1\75\2\0\21\27\1\303\6\27\1\0\1\27\15\0"+
    "\1\74\7\0\1\27\6\0\2\27\1\304\2\0\4\27"+
    "\1\305\23\27\1\0\1\27\15\0\1\74\7\0\1\27"+
    "\6\0\2\27\1\75\2\0\6\27\1\271\21\27\1\0"+
    "\1\27\15\0\1\74\7\0\1\27\6\0\2\27\1\75"+
    "\2\0\10\27\1\306\17\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\12\27\1\307"+
    "\15\27\1\0\1\27\15\0\1\74\7\0\1\27\6\0"+
    "\2\27\1\75\2\0\11\27\1\310\16\27\1\0\1\27"+
    "\15\0\1\74\7\0\1\27\6\0\2\27\1\75\2\0"+
    "\23\27\1\311\4\27\1\0\1\27\15\0\1\74\7\0"+
    "\1\27\6\0\2\27\1\75\2\0\21\27\1\312\6\27"+
    "\1\0\1\27\15\0\1\74\7\0\1\27\6\0\2\27"+
    "\1\75\2\0\12\27\1\313\15\27\1\0\1\27\15\0"+
    "\1\74\7\0\1\27\6\0\2\27\1\75\2\0\22\27"+
    "\1\314\5\27\1\0\1\27\15\0\1\74\7\0\1\27"+
    "\6\0\2\27\1\75\2\0\17\27\1\301\10\27\1\0"+
    "\1\27\15\0\1\74\7\0\1\27\6\0\2\27\1\75"+
    "\2\0\21\27\1\315\6\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\10\27\1\316"+
    "\17\27\1\0\1\27\15\0\1\74\7\0\1\27\6\0"+
    "\2\27\1\75\2\0\4\27\1\317\23\27\1\0\1\27"+
    "\15\0\1\74\7\0\1\27\6\0\2\27\1\75\2\0"+
    "\21\27\1\320\6\27\1\0\1\27\15\0\1\74\7\0"+
    "\1\27\6\0\2\27\1\75\2\0\2\27\1\321\25\27"+
    "\1\0\1\27\15\0\1\74\7\0\1\27\6\0\2\27"+
    "\1\75\2\0\20\27\1\216\7\27\1\0\1\27\15\0"+
    "\1\74\7\0\1\27\6\0\2\27\1\75\2\0\15\27"+
    "\1\322\12\27\1\0\1\27\15\0\1\74\7\0\1\27"+
    "\6\0\2\27\1\75\2\0\14\27\1\323\13\27\1\0"+
    "\1\27\15\0\1\74\7\0\1\27\6\0\2\27\1\75"+
    "\2\0\4\27\1\307\23\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\3\27\1\271"+
    "\24\27\1\0\1\27\15\0\1\74\7\0\1\27\6\0"+
    "\2\27\1\75\2\0\1\324\27\27\1\0\1\27\15\0"+
    "\1\74\7\0\1\27\6\0\2\27\1\75\2\0\12\27"+
    "\1\325\15\27\1\0\1\27\7\0\1\245\11\0\1\246"+
    "\51\0\1\247\13\0\1\243\65\0\1\245\11\0\1\246"+
    "\60\0\1\246\1\0\1\146\2\0\1\147\2\0\1\150"+
    "\2\0\1\151\1\152\1\0\1\150\6\0\2\326\3\0"+
    "\30\326\1\0\1\327\7\0\1\250\11\0\1\251\60\0"+
    "\1\251\1\0\1\146\2\0\1\147\2\0\1\150\2\0"+
    "\1\151\1\152\1\0\1\150\6\0\2\153\3\0\30\153"+
    "\1\154\1\155\3\0\6\252\1\330\64\252\3\331\1\0"+
    "\66\331\5\0\1\332\11\0\1\333\1\0\1\256\47\0"+
    "\1\261\16\0\1\254\5\0\1\254\44\0\1\254\17\0"+
    "\1\330\5\0\1\330\44\0\1\330\7\0\1\332\11\0"+
    "\1\333\3\0\1\257\6\0\2\257\3\0\30\257\1\0"+
    "\1\257\1\261\6\0\1\332\11\0\1\333\1\0\1\256"+
    "\1\0\1\257\6\0\2\257\3\0\30\257\1\0\1\257"+
    "\1\261\6\0\1\334\11\0\1\335\51\0\1\156\2\0"+
    "\14\161\1\262\4\161\1\336\51\161\33\0\1\337\51\0"+
    "\1\74\7\0\1\27\6\0\2\27\1\75\2\0\14\27"+
    "\1\340\13\27\1\0\1\27\15\0\1\74\7\0\1\27"+
    "\6\0\2\27\1\75\2\0\17\27\1\341\10\27\1\0"+
    "\1\27\15\0\1\74\7\0\1\27\6\0\2\27\1\75"+
    "\2\0\17\27\1\273\10\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\4\27\1\342"+
    "\23\27\1\0\1\27\15\0\1\74\7\0\1\27\6\0"+
    "\2\27\1\75\2\0\11\27\1\216\16\27\1\0\1\27"+
    "\15\0\1\74\7\0\1\27\6\0\2\27\1\304\2\0"+
    "\30\27\1\0\1\27\15\0\1\74\7\0\1\27\6\0"+
    "\2\27\1\75\2\0\7\27\1\237\20\27\1\0\1\27"+
    "\15\0\1\74\7\0\1\27\6\0\2\27\1\75\2\0"+
    "\21\27\1\216\6\27\1\0\1\27\15\0\1\74\7\0"+
    "\1\27\6\0\2\27\1\75\2\0\10\27\1\343\17\27"+
    "\1\0\1\27\15\0\1\74\7\0\1\27\6\0\2\27"+
    "\1\75\2\0\22\27\1\344\5\27\1\0\1\27\15\0"+
    "\1\74\7\0\1\27\6\0\2\27\1\75\2\0\12\27"+
    "\1\172\15\27\1\0\1\27\15\0\1\74\7\0\1\27"+
    "\6\0\2\27\1\75\2\0\14\27\1\345\13\27\1\0"+
    "\1\27\15\0\1\74\7\0\1\27\6\0\2\27\1\75"+
    "\2\0\12\27\1\346\15\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\21\27\1\271"+
    "\6\27\1\0\1\27\15\0\1\74\7\0\1\27\6\0"+
    "\2\27\1\75\2\0\4\27\1\347\23\27\1\0\1\27"+
    "\15\0\1\74\7\0\1\27\6\0\2\27\1\75\2\0"+
    "\1\350\27\27\1\0\1\27\17\0\1\351\5\0\1\351"+
    "\11\0\1\352\32\0\1\351\15\0\1\74\7\0\1\27"+
    "\6\0\2\27\1\75\2\0\17\27\1\353\10\27\1\0"+
    "\1\27\15\0\1\74\7\0\1\27\6\0\2\27\1\75"+
    "\2\0\23\27\1\354\4\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\1\355\27\27"+
    "\1\0\1\27\15\0\1\74\7\0\1\27\6\0\2\27"+
    "\1\75\2\0\1\356\27\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\4\27\1\357"+
    "\23\27\1\0\1\27\15\0\1\74\7\0\1\27\6\0"+
    "\2\27\1\75\2\0\10\27\1\360\17\27\1\0\1\27"+
    "\15\0\1\74\7\0\1\27\6\0\2\27\1\75\2\0"+
    "\17\27\1\361\10\27\1\0\1\27\15\0\1\74\7\0"+
    "\1\27\6\0\2\27\1\75\2\0\10\27\1\362\17\27"+
    "\1\0\1\27\15\0\1\74\7\0\1\27\6\0\2\27"+
    "\1\75\2\0\2\27\1\363\25\27\1\0\1\27\15\0"+
    "\1\74\7\0\1\27\6\0\2\27\1\75\2\0\17\27"+
    "\1\216\10\27\1\0\1\27\15\0\1\74\7\0\1\27"+
    "\6\0\2\27\1\75\2\0\2\27\1\364\25\27\1\0"+
    "\1\27\15\0\1\74\7\0\1\27\6\0\2\27\1\75"+
    "\2\0\7\27\1\365\20\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\24\27\1\366"+
    "\3\27\1\0\1\27\15\0\1\74\7\0\1\27\6\0"+
    "\2\27\1\75\2\0\20\27\1\367\7\27\1\0\1\27"+
    "\15\0\1\74\7\0\1\27\6\0\2\27\1\75\2\0"+
    "\21\27\1\370\6\27\1\0\1\27\15\0\1\74\7\0"+
    "\1\27\6\0\2\27\1\75\2\0\4\27\1\207\23\27"+
    "\1\0\1\27\7\0\1\245\11\0\1\246\3\0\1\326"+
    "\6\0\2\326\3\0\30\326\1\0\1\326\1\247\6\0"+
    "\1\245\11\0\1\246\1\0\1\152\1\0\1\326\6\0"+
    "\2\326\3\0\30\326\1\0\1\326\1\247\6\0\1\332"+
    "\11\0\1\333\51\0\1\261\13\0\1\330\65\0\1\332"+
    "\11\0\1\333\60\0\1\333\1\0\1\252\2\0\1\253"+
    "\2\0\1\254\2\0\1\255\1\256\1\0\1\254\6\0"+
    "\2\257\3\0\30\257\1\0\1\260\7\0\1\334\11\0"+
    "\1\335\60\0\1\335\24\0\2\371\3\0\30\371\1\154"+
    "\1\371\17\0\1\372\5\0\1\372\44\0\1\372\15\0"+
    "\1\74\7\0\1\27\6\0\2\27\1\75\2\0\6\27"+
    "\1\373\21\27\1\0\1\27\15\0\1\74\7\0\1\27"+
    "\6\0\2\27\1\75\2\0\1\374\27\27\1\0\1\27"+
    "\15\0\1\74\7\0\1\27\6\0\2\27\1\75\2\0"+
    "\1\361\27\27\1\0\1\27\15\0\1\74\7\0\1\27"+
    "\6\0\2\27\1\75\2\0\14\27\1\375\13\27\1\0"+
    "\1\27\15\0\1\74\7\0\1\27\6\0\2\27\1\75"+
    "\2\0\12\27\1\376\15\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\3\27\1\233"+
    "\24\27\1\0\1\27\15\0\1\74\7\0\1\27\6\0"+
    "\2\27\1\75\2\0\12\27\1\377\15\27\1\0\1\27"+
    "\15\0\1\74\7\0\1\27\6\0\2\27\1\75\2\0"+
    "\13\27\1\u0100\14\27\1\0\1\27\15\0\1\74\7\0"+
    "\1\27\6\0\2\27\1\75\2\0\14\27\1\u0101\13\27"+
    "\1\0\1\27\37\0\1\u0102\71\0\1\u0103\51\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\5\27\1\u0104"+
    "\22\27\1\0\1\27\15\0\1\74\7\0\1\27\6\0"+
    "\2\27\1\75\2\0\4\27\1\216\23\27\1\0\1\27"+
    "\15\0\1\74\7\0\1\27\6\0\2\27\1\75\2\0"+
    "\6\27\1\354\21\27\1\0\1\27\15\0\1\74\7\0"+
    "\1\27\6\0\2\27\1\75\2\0\21\27\1\u0105\6\27"+
    "\1\0\1\27\15\0\1\74\7\0\1\27\6\0\2\27"+
    "\1\75\2\0\2\27\1\u0106\25\27\1\0\1\27\15\0"+
    "\1\74\7\0\1\27\6\0\2\27\1\75\2\0\2\27"+
    "\1\u0107\25\27\1\0\1\27\15\0\1\74\7\0\1\27"+
    "\6\0\2\27\1\75\2\0\14\27\1\216\13\27\1\0"+
    "\1\27\15\0\1\74\7\0\1\27\6\0\2\27\1\75"+
    "\2\0\2\27\1\216\25\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\21\27\1\u0108"+
    "\6\27\1\0\1\27\15\0\1\74\7\0\1\27\6\0"+
    "\2\27\1\75\2\0\7\27\1\122\20\27\1\0\1\27"+
    "\15\0\1\74\7\0\1\27\6\0\2\27\1\75\2\0"+
    "\17\27\1\u0109\10\27\1\0\1\27\15\0\1\74\7\0"+
    "\1\27\6\0\2\27\1\75\2\0\20\27\1\237\7\27"+
    "\1\0\1\27\15\0\1\74\7\0\1\27\6\0\2\27"+
    "\1\75\2\0\10\27\1\u010a\17\27\1\0\1\27\15\0"+
    "\1\74\7\0\1\27\6\0\2\27\1\75\2\0\10\27"+
    "\1\u010b\17\27\1\0\1\27\7\0\1\334\11\0\1\335"+
    "\3\0\1\371\6\0\2\371\3\0\30\371\1\0\1\371"+
    "\1\156\36\0\1\u010c\50\0\1\74\7\0\1\27\6\0"+
    "\2\27\1\75\2\0\2\27\1\273\25\27\1\0\1\27"+
    "\15\0\1\74\7\0\1\27\6\0\2\27\1\75\2\0"+
    "\22\27\1\354\5\27\1\0\1\27\15\0\1\74\7\0"+
    "\1\27\6\0\2\27\1\75\2\0\21\27\1\u0107\6\27"+
    "\1\0\1\27\15\0\1\74\7\0\1\27\6\0\2\27"+
    "\1\75\2\0\26\27\1\237\1\27\1\0\1\27\15\0"+
    "\1\74\7\0\1\27\6\0\2\27\1\75\2\0\4\27"+
    "\1\u010d\23\27\1\0\1\27\15\0\1\74\7\0\1\27"+
    "\6\0\2\27\1\75\2\0\2\27\1\u010e\25\27\1\0"+
    "\1\27\36\0\1\u010f\73\0\1\u0110\50\0\1\74\7\0"+
    "\1\27\6\0\2\27\1\75\2\0\1\u0111\27\27\1\0"+
    "\1\27\15\0\1\74\7\0\1\27\6\0\2\27\1\75"+
    "\2\0\4\27\1\u0107\23\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\21\27\1\u0112"+
    "\6\27\1\0\1\27\15\0\1\74\7\0\1\27\6\0"+
    "\2\27\1\75\2\0\5\27\1\u0113\22\27\1\0\1\27"+
    "\15\0\1\74\7\0\1\27\6\0\2\27\1\75\2\0"+
    "\15\27\1\u0114\12\27\1\0\1\27\15\0\1\74\7\0"+
    "\1\27\6\0\2\27\1\75\2\0\4\27\1\u0115\23\27"+
    "\1\0\1\27\15\0\1\74\7\0\1\27\6\0\2\27"+
    "\1\75\2\0\12\27\1\354\15\27\1\0\1\27\15\0"+
    "\1\74\7\0\1\27\6\0\2\27\1\75\2\0\14\27"+
    "\1\u0116\13\27\1\0\1\27\15\0\1\74\7\0\1\27"+
    "\6\0\2\27\1\75\2\0\4\27\1\u0117\23\27\1\0"+
    "\1\27\17\0\1\372\5\0\1\372\11\0\1\u0110\32\0"+
    "\1\372\15\0\1\74\7\0\1\27\6\0\2\27\1\75"+
    "\2\0\2\27\1\354\25\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\4\27\1\u0118"+
    "\23\27\1\0\1\27\15\0\1\74\7\0\1\27\6\0"+
    "\2\27\1\75\2\0\16\27\1\216\11\27\1\0\1\27"+
    "\15\0\1\74\7\0\1\27\6\0\2\27\1\75\2\0"+
    "\14\27\1\u0119\13\27\1\0\1\27\15\0\1\74\7\0"+
    "\1\27\6\0\2\27\1\75\2\0\14\27\1\273\13\27"+
    "\1\0\1\27\15\0\1\74\7\0\1\27\6\0\2\27"+
    "\1\75\2\0\21\27\1\233\6\27\1\0\1\27\15\0"+
    "\1\74\7\0\1\27\6\0\2\27\1\75\2\0\15\27"+
    "\1\u011a\12\27\1\0\1\27\15\0\1\74\7\0\1\27"+
    "\6\0\2\27\1\75\2\0\3\27\1\u0107\24\27\1\0"+
    "\1\27\15\0\1\74\7\0\1\27\6\0\2\27\1\75"+
    "\2\0\10\27\1\u011b\17\27\1\0\1\27\15\0\1\74"+
    "\7\0\1\27\6\0\2\27\1\75\2\0\5\27\1\216"+
    "\22\27\1\0\1\27\15\0\1\74\7\0\1\27\6\0"+
    "\2\27\1\75\2\0\27\27\1\u011c\1\0\1\27\15\0"+
    "\1\74\7\0\1\27\6\0\2\27\1\75\2\0\4\27"+
    "\1\u011d\23\27\1\0\1\27\15\0\1\74\7\0\1\27"+
    "\6\0\2\27\1\75\2\0\3\27\1\216\24\27\1\0"+
    "\1\27\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14868];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\2\11\6\1\2\11\3\1\1\11"+
    "\2\1\2\11\23\1\3\11\1\0\3\11\2\0\1\11"+
    "\4\1\2\0\50\1\10\0\1\11\1\1\1\11\1\0"+
    "\2\1\1\0\56\1\4\0\1\11\13\0\21\1\1\0"+
    "\21\1\10\0\1\11\1\0\11\1\1\0\17\1\2\0"+
    "\10\1\1\0\10\1\1\11\2\1\1\0\1\11\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */

private void imprimir(String descricao, String lexema) {
    System.out.println(lexema + " - " + descricao);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Caractere inválido " + yytext());
            }
            // fall through
          case 41: break;
          case 2:
            { imprimir("Espaço em branco", yytext());
            }
            // fall through
          case 42: break;
          case 3:
            { imprimir("Operador lógico", yytext());
            }
            // fall through
          case 43: break;
          case 4:
            { imprimir("Operador aritmético", yytext());
            }
            // fall through
          case 44: break;
          case 5:
            { imprimir("Operador de bits", yytext());
            }
            // fall through
          case 45: break;
          case 6:
            { imprimir("Parêntese aberto", yytext());
            }
            // fall through
          case 46: break;
          case 7:
            { imprimir("Parêntese fechado", yytext());
            }
            // fall through
          case 47: break;
          case 8:
            { imprimir("Separador ponto", yytext());
            }
            // fall through
          case 48: break;
          case 9:
            { imprimir("Comentário", yytext());
            }
            // fall through
          case 49: break;
          case 10:
            { imprimir("Constante tipo número inteiro", yytext());
            }
            // fall through
          case 50: break;
          case 11:
            { imprimir("Separador dois-pontos", yytext());
            }
            // fall through
          case 51: break;
          case 12:
            { imprimir("Separador ponto e vírgula", yytext());
            }
            // fall through
          case 52: break;
          case 13:
            { imprimir("Operador comparativo", yytext());
            }
            // fall through
          case 53: break;
          case 14:
            { imprimir("Operador de atribuição", yytext());
            }
            // fall through
          case 54: break;
          case 15:
            { imprimir("Operador ternário", yytext());
            }
            // fall through
          case 55: break;
          case 16:
            { imprimir("Identificador", yytext());
            }
            // fall through
          case 56: break;
          case 17:
            { imprimir("Colchete aberto", yytext());
            }
            // fall through
          case 57: break;
          case 18:
            { imprimir("Colchete fechado", yytext());
            }
            // fall through
          case 58: break;
          case 19:
            { imprimir("Chave aberta", yytext());
            }
            // fall through
          case 59: break;
          case 20:
            { imprimir("Chave fechada", yytext());
            }
            // fall through
          case 60: break;
          case 21:
            { imprimir("Operador unário", yytext());
            }
            // fall through
          case 61: break;
          case 22:
            { imprimir("Constante tipo string", yytext());
            }
            // fall through
          case 62: break;
          case 23:
            { imprimir("Constante tipo float", yytext());
            }
            // fall through
          case 63: break;
          case 24:
            { imprimir("Operador de shift", yytext());
            }
            // fall through
          case 64: break;
          case 25:
            { imprimir("Palavra reservada " + yytext() + " (loop)", yytext());
            }
            // fall through
          case 65: break;
          case 26:
            { imprimir("Palavra reservada " + yytext() + " (desvio condicional)", yytext());
            }
            // fall through
          case 66: break;
          case 27:
            { imprimir("Constante de uma matriz", yytext());
            }
            // fall through
          case 67: break;
          case 28:
            { imprimir("Constante tipo char", yytext());
            }
            // fall through
          case 68: break;
          case 29:
            { imprimir("Método", yytext());
            }
            // fall through
          case 69: break;
          case 30:
            { imprimir("Palavra reservada " + yytext() + " (tipo)", yytext());
            }
            // fall through
          case 70: break;
          case 31:
            { imprimir("Palavra reservada " + yytext(), yytext());
            }
            // fall through
          case 71: break;
          case 32:
            { imprimir("Palavra reservada " + yytext() + " (exceção)", yytext());
            }
            // fall through
          case 72: break;
          case 33:
            { imprimir("Constante de um array", yytext());
            }
            // fall through
          case 73: break;
          case 34:
            { imprimir("Posição do array", yytext());
            }
            // fall through
          case 74: break;
          case 35:
            { imprimir("Palavra reservada " + yytext() + " (valor literal)", yytext());
            }
            // fall through
          case 75: break;
          case 36:
            { imprimir("Declaração de array", yytext());
            }
            // fall through
          case 76: break;
          case 37:
            { imprimir("Tipo não primitivo " + yytext(), yytext());
            }
            // fall through
          case 77: break;
          case 38:
            { imprimir("Palavra reservada " + yytext() + " (modificador de acesso)", yytext());
            }
            // fall through
          case 78: break;
          case 39:
            { imprimir("Posição da matriz", yytext());
            }
            // fall through
          case 79: break;
          case 40:
            { imprimir("Declaração de matriz", yytext());
            }
            // fall through
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
