// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: language.lex

package analisadorLexico;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Paths;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class LexicalAnalyzer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\2\22\0\1\1\1\4"+
    "\1\5\2\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\12\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\22\31\1\32\7\31"+
    "\1\33\1\0\1\34\1\35\1\31\1\0\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\31"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\31\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\6\0\1\3\32\0\1\1"+
    "\u01df\0\1\1\177\0\13\1\35\0\2\3\5\0\1\1"+
    "\57\0\1\1\240\0\1\1\377\0\u0100\72";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\1\6\1\7\2\4\1\10\1\4\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\16\1\20\1\21\2\22"+
    "\1\23\1\24\1\5\20\22\1\25\1\2\1\26\1\27"+
    "\1\16\1\0\1\30\1\17\1\3\2\0\1\31\2\12"+
    "\2\32\1\0\1\33\1\0\13\22\1\34\10\22\1\35"+
    "\23\22\11\0\1\36\2\2\1\37\1\0\1\12\2\0"+
    "\22\22\1\34\3\22\1\40\2\22\1\41\20\22\1\42"+
    "\3\22\3\0\1\43\15\0\1\44\5\22\1\40\12\22"+
    "\1\0\1\22\1\0\3\22\1\45\16\22\10\0\1\12"+
    "\2\0\6\22\1\41\2\22\4\0\1\46\1\0\13\22"+
    "\1\42\2\22\6\0\1\47\6\22\2\0\1\44\2\0"+
    "\1\46\3\22\1\50\4\22\1\0\1\51\2\22\3\0"+
    "\1\52\13\22\1\41\3\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\73\0\73\0\u01d8\0\u0213\0\73\0\u024e\0\u0289\0\u02c4"+
    "\0\u02ff\0\73\0\73\0\u033a\0\261\0\u0375\0\73\0\u03b0"+
    "\0\u03eb\0\u0426\0\73\0\73\0\u0127\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af"+
    "\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\73"+
    "\0\73\0\73\0\354\0\73\0\73\0\73\0\u0887\0\u0289"+
    "\0\73\0\u08c2\0\u08fd\0\u0127\0\u0938\0\u0973\0\73\0\u09ae"+
    "\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86"+
    "\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e"+
    "\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u03eb\0\u0e85\0\u0ec0\0\u0efb"+
    "\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3"+
    "\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab"+
    "\0\u0811\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448"+
    "\0\u1483\0\73\0\u14be\0\u14f9\0\73\0\u1534\0\u156f\0\u15aa"+
    "\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782"+
    "\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a"+
    "\0\u1995\0\u19d0\0\u1a0b\0\u03eb\0\u1a46\0\u1a81\0\u1abc\0\u1af7"+
    "\0\u1b32\0\u1b6d\0\u03eb\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94"+
    "\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c"+
    "\0\u1ea7\0\u1ee2\0\u1f1d\0\u03eb\0\u1f58\0\u1f93\0\u1fce\0\u2009"+
    "\0\u2044\0\u207f\0\73\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6"+
    "\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e"+
    "\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556"+
    "\0\u2591\0\u25cc\0\u2607\0\u2642\0\u267d\0\u26b8\0\u26f3\0\u272e"+
    "\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855\0\u2890\0\u28cb\0\u03eb"+
    "\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3"+
    "\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca\0\u2c05\0\u2c40\0\u2c7b"+
    "\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd\0\73\0\u23b9"+
    "\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5"+
    "\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u3117\0\u3152\0\u318d"+
    "\0\u31c8\0\u3203\0\u323e\0\u3279\0\u32b4\0\u32ef\0\u332a\0\u3365"+
    "\0\u33a0\0\u33db\0\u3416\0\u3451\0\u348c\0\u34c7\0\u3502\0\u353d"+
    "\0\u3578\0\u35b3\0\u35ee\0\u3629\0\u03eb\0\u3664\0\u369f\0\u36da"+
    "\0\u3715\0\u3750\0\u378b\0\u37c6\0\u3801\0\u383c\0\u3152\0\u3877"+
    "\0\u383c\0\u38b2\0\u38ed\0\u3928\0\u03eb\0\u3963\0\u399e\0\u39d9"+
    "\0\u3a14\0\u3a4f\0\73\0\u3a8a\0\u3ac5\0\u3b00\0\u383c\0\u3b3b"+
    "\0\73\0\u3b76\0\u3bb1\0\u3bec\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8"+
    "\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4\0\u27df\0\u3dff\0\u3e3a\0\u3e75";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\31\1\45\1\31\1\46\1\31"+
    "\1\47\1\31\1\50\1\51\1\52\1\53\1\31\1\54"+
    "\1\55\3\31\1\56\1\57\1\60\1\61\75\0\3\3"+
    "\63\0\1\3\30\0\1\62\45\0\5\63\1\64\65\63"+
    "\25\0\1\65\54\0\1\66\15\0\1\65\45\0\3\67"+
    "\1\0\66\67\20\0\1\70\5\0\1\65\61\0\1\61"+
    "\10\0\1\65\60\0\1\21\2\0\1\61\2\0\1\21"+
    "\3\0\1\65\41\0\1\21\16\0\1\71\5\0\1\71"+
    "\45\0\1\71\3\0\2\72\2\0\7\72\1\73\56\72"+
    "\20\0\1\70\77\0\1\74\1\62\72\0\1\62\1\75"+
    "\44\0\2\30\2\0\66\30\2\0\3\76\5\0\1\77"+
    "\7\0\1\31\7\0\2\31\1\100\2\0\30\31\1\0"+
    "\1\31\4\0\3\76\5\0\1\77\7\0\1\31\7\0"+
    "\2\31\1\100\2\0\21\31\1\101\6\31\1\0\1\31"+
    "\4\0\3\76\5\0\1\77\7\0\1\31\7\0\2\31"+
    "\1\100\2\0\1\31\1\102\16\31\1\103\7\31\1\0"+
    "\1\31\4\0\3\76\5\0\1\77\7\0\1\31\7\0"+
    "\2\31\1\100\2\0\15\31\1\104\1\31\1\105\6\31"+
    "\1\106\1\31\1\0\1\31\4\0\3\76\5\0\1\77"+
    "\7\0\1\31\7\0\2\31\1\100\2\0\1\107\6\31"+
    "\1\110\2\31\1\111\2\31\1\112\12\31\1\0\1\31"+
    "\4\0\3\76\5\0\1\77\7\0\1\31\7\0\2\31"+
    "\1\100\2\0\4\31\1\113\10\31\1\114\12\31\1\0"+
    "\1\31\4\0\3\76\5\0\1\77\7\0\1\31\7\0"+
    "\2\31\1\100\2\0\12\31\1\115\1\31\1\116\10\31"+
    "\1\117\2\31\1\0\1\31\4\0\3\76\5\0\1\77"+
    "\7\0\1\31\7\0\2\31\1\100\2\0\1\120\7\31"+
    "\1\121\1\31\1\122\2\31\1\123\12\31\1\0\1\31"+
    "\4\0\3\76\5\0\1\77\7\0\1\31\7\0\2\31"+
    "\1\100\2\0\15\31\1\124\12\31\1\0\1\31\4\0"+
    "\3\76\5\0\1\77\7\0\1\31\7\0\2\31\1\100"+
    "\2\0\5\31\1\125\5\31\1\126\1\127\13\31\1\0"+
    "\1\31\4\0\3\76\5\0\1\77\7\0\1\31\7\0"+
    "\2\31\1\100\2\0\15\31\1\130\12\31\1\0\1\31"+
    "\4\0\3\76\5\0\1\77\7\0\1\31\7\0\2\31"+
    "\1\100\2\0\1\131\3\31\1\132\15\31\1\133\5\31"+
    "\1\0\1\31\4\0\3\76\5\0\1\77\7\0\1\31"+
    "\7\0\2\31\1\100\2\0\1\134\16\31\1\135\2\31"+
    "\1\136\5\31\1\0\1\31\4\0\3\76\5\0\1\77"+
    "\7\0\1\31\7\0\2\31\1\100\2\0\4\31\1\137"+
    "\23\31\1\0\1\31\4\0\3\76\5\0\1\77\7\0"+
    "\1\31\7\0\2\31\1\100\2\0\7\31\1\140\11\31"+
    "\1\141\1\142\1\31\1\143\1\31\1\144\1\31\1\0"+
    "\1\31\4\0\3\76\5\0\1\77\7\0\1\31\7\0"+
    "\2\31\1\100\2\0\7\31\1\145\7\31\1\146\10\31"+
    "\1\0\1\31\4\0\3\76\5\0\1\77\7\0\1\31"+
    "\7\0\2\31\1\100\2\0\15\31\1\147\12\31\1\0"+
    "\1\31\4\0\3\76\5\0\1\77\7\0\1\31\7\0"+
    "\2\31\1\100\2\0\7\31\1\150\20\31\1\0\1\31"+
    "\4\0\3\151\1\0\1\152\2\0\1\153\2\0\1\154"+
    "\2\0\1\155\1\156\1\0\1\154\7\0\2\157\3\0"+
    "\30\157\1\160\1\161\1\162\3\0\3\163\5\0\1\77"+
    "\5\0\1\70\1\0\1\31\3\0\1\65\3\0\2\31"+
    "\1\100\2\0\30\31\1\0\1\164\13\0\1\165\62\0"+
    "\2\72\2\0\66\72\1\0\2\73\2\166\7\73\1\167"+
    "\56\73\1\166\25\0\1\65\1\74\45\0\3\76\5\0"+
    "\1\77\21\0\1\100\33\0\1\76\4\0\3\100\7\0"+
    "\1\170\5\0\1\170\45\0\1\171\4\0\3\76\5\0"+
    "\1\77\7\0\1\31\7\0\2\31\1\100\2\0\17\31"+
    "\1\172\10\31\1\0\1\31\4\0\3\76\5\0\1\77"+
    "\7\0\1\31\7\0\2\31\1\100\2\0\20\31\1\173"+
    "\7\31\1\0\1\31\4\0\3\76\5\0\1\77\7\0"+
    "\1\31\7\0\2\31\1\100\2\0\20\31\1\174\7\31"+
    "\1\0\1\31\4\0\3\76\5\0\1\77\7\0\1\31"+
    "\7\0\2\31\1\100\2\0\15\31\1\175\12\31\1\0"+
    "\1\31\4\0\3\76\5\0\1\77\7\0\1\31\7\0"+
    "\2\31\1\100\2\0\4\31\1\176\23\31\1\0\1\31"+
    "\4\0\3\76\5\0\1\77\7\0\1\31\7\0\2\31"+
    "\1\100\2\0\21\31\1\177\6\31\1\0\1\31\4\0"+
    "\3\76\5\0\1\77\7\0\1\31\7\0\2\31\1\100"+
    "\2\0\20\31\1\200\1\201\6\31\1\0\1\31\4\0"+
    "\3\76\5\0\1\77\7\0\1\31\7\0\2\31\1\100"+
    "\2\0\1\202\27\31\1\0\1\31\4\0\3\76\5\0"+
    "\1\77\7\0\1\31\7\0\2\31\1\100\2\0\1\203"+
    "\27\31\1\0\1\31\4\0\3\76\5\0\1\77\7\0"+
    "\1\31\7\0\2\31\1\100\2\0\14\31\1\204\13\31"+
    "\1\0\1\31\4\0\3\76\5\0\1\77\7\0\1\31"+
    "\7\0\2\31\1\100\2\0\5\31\1\205\22\31\1\0"+
    "\1\31\4\0\3\76\5\0\1\77\7\0\1\31\7\0"+
    "\2\31\1\100\2\0\22\31\1\206\5\31\1\0\1\31"+
    "\4\0\3\76\5\0\1\77\7\0\1\31\7\0\2\31"+
    "\1\100\2\0\20\31\1\200\7\31\1\0\1\31\4\0"+
    "\3\76\5\0\1\77\7\0\1\31\7\0\2\31\1\100"+
    "\2\0\22\31\1\207\5\31\1\0\1\31\4\0\3\76"+
    "\5\0\1\77\7\0\1\31\7\0\2\31\1\100\2\0"+
    "\21\31\1\210\6\31\1\0\1\31\4\0\3\76\5\0"+
    "\1\77\7\0\1\31\7\0\2\31\1\100\2\0\12\31"+
    "\1\211\15\31\1\0\1\31\4\0\3\76\5\0\1\77"+
    "\7\0\1\31\7\0\2\31\1\100\2\0\14\31\1\212"+
    "\13\31\1\0\1\31\4\0\3\76\5\0\1\77\7\0"+
    "\1\31\7\0\2\31\1\100\2\0\15\31\1\213\12\31"+
    "\1\0\1\31\4\0\3\76\5\0\1\77\7\0\1\31"+
    "\7\0\2\31\1\100\2\0\17\31\1\214\10\31\1\0"+
    "\1\31\4\0\3\76\5\0\1\77\7\0\1\31\7\0"+
    "\2\31\1\100\2\0\21\31\1\215\6\31\1\0\1\31"+
    "\4\0\3\76\5\0\1\77\7\0\1\31\7\0\2\31"+
    "\1\100\2\0\16\31\1\216\11\31\1\0\1\31\4\0"+
    "\3\76\5\0\1\77\7\0\1\31\7\0\2\31\1\100"+
    "\2\0\20\31\1\217\1\220\6\31\1\0\1\31\4\0"+
    "\3\76\5\0\1\77\7\0\1\31\7\0\2\31\1\100"+
    "\2\0\14\31\1\221\13\31\1\0\1\31\4\0\3\76"+
    "\5\0\1\77\7\0\1\31\7\0\2\31\1\100\2\0"+
    "\21\31\1\222\6\31\1\0\1\31\4\0\3\76\5\0"+
    "\1\77\7\0\1\31\7\0\2\31\1\100\2\0\24\31"+
    "\1\223\3\31\1\0\1\31\4\0\3\76\5\0\1\77"+
    "\7\0\1\31\7\0\2\31\1\100\2\0\12\31\1\224"+
    "\15\31\1\0\1\31\4\0\3\76\5\0\1\77\7\0"+
    "\1\31\7\0\2\31\1\100\2\0\2\31\1\225\25\31"+
    "\1\0\1\31\4\0\3\76\5\0\1\77\7\0\1\31"+
    "\7\0\2\31\1\100\2\0\10\31\1\226\4\31\1\227"+
    "\12\31\1\0\1\31\4\0\3\76\5\0\1\77\7\0"+
    "\1\31\7\0\2\31\1\100\2\0\1\31\1\230\26\31"+
    "\1\0\1\31\4\0\3\76\5\0\1\77\7\0\1\31"+
    "\7\0\2\31\1\100\2\0\21\31\1\231\6\31\1\0"+
    "\1\31\4\0\3\76\5\0\1\77\7\0\1\31\7\0"+
    "\2\31\1\100\2\0\15\31\1\232\12\31\1\0\1\31"+
    "\4\0\3\76\5\0\1\77\7\0\1\31\7\0\2\31"+
    "\1\100\2\0\1\233\16\31\1\234\10\31\1\0\1\31"+
    "\4\0\3\76\5\0\1\77\7\0\1\31\7\0\2\31"+
    "\1\100\2\0\16\31\1\235\11\31\1\0\1\31\4\0"+
    "\3\76\5\0\1\77\7\0\1\31\7\0\2\31\1\100"+
    "\2\0\10\31\1\236\17\31\1\0\1\31\4\0\3\76"+
    "\5\0\1\77\7\0\1\31\7\0\2\31\1\100\2\0"+
    "\14\31\1\237\13\31\1\0\1\31\4\0\3\76\5\0"+
    "\1\77\7\0\1\31\7\0\2\31\1\100\2\0\10\31"+
    "\1\240\6\31\1\241\10\31\1\0\1\31\4\0\3\76"+
    "\5\0\1\77\7\0\1\31\7\0\2\31\1\100\2\0"+
    "\1\242\21\31\1\243\3\31\1\244\1\31\1\0\1\31"+
    "\4\0\3\76\5\0\1\77\7\0\1\31\7\0\2\31"+
    "\1\100\2\0\10\31\1\245\1\31\1\246\15\31\1\0"+
    "\1\31\4\0\3\76\5\0\1\77\7\0\1\31\7\0"+
    "\2\31\1\100\2\0\10\31\1\247\17\31\1\0\1\31"+
    "\3\0\5\152\1\250\65\152\3\251\1\0\66\251\2\0"+
    "\3\250\11\0\1\252\1\0\1\156\47\0\1\250\1\253"+
    "\15\0\1\154\5\0\1\154\45\0\1\154\16\0\1\250"+
    "\5\0\1\250\45\0\1\250\4\0\3\254\11\0\1\255"+
    "\3\0\1\157\7\0\2\157\3\0\30\157\1\0\1\157"+
    "\1\162\3\0\3\160\1\0\1\256\2\0\1\257\2\0"+
    "\1\260\2\0\1\261\1\262\1\0\1\260\7\0\2\263"+
    "\3\0\30\263\1\0\1\264\1\265\3\0\3\266\1\0"+
    "\1\152\2\0\1\153\2\0\1\154\1\0\1\255\1\155"+
    "\1\156\1\0\1\267\7\0\2\157\3\0\30\157\1\160"+
    "\1\161\1\162\3\0\3\163\5\0\1\77\21\0\1\100"+
    "\33\0\1\163\4\0\3\163\5\0\1\77\7\0\1\31"+
    "\7\0\2\31\1\100\2\0\30\31\1\0\1\164\3\0"+
    "\13\166\1\270\57\166\2\73\2\166\7\73\1\167\4\73"+
    "\1\72\51\73\1\166\1\0\3\170\30\0\1\271\32\0"+
    "\1\170\4\0\3\171\7\0\1\170\5\0\1\170\12\0"+
    "\1\271\32\0\1\171\4\0\3\76\5\0\1\77\7\0"+
    "\1\31\7\0\2\31\1\100\2\0\10\31\1\272\17\31"+
    "\1\0\1\31\4\0\3\76\5\0\1\77\7\0\1\31"+
    "\7\0\2\31\1\100\2\0\21\31\1\273\6\31\1\0"+
    "\1\31\4\0\3\76\5\0\1\77\7\0\1\31\7\0"+
    "\2\31\1\100\2\0\4\31\1\274\23\31\1\0\1\31"+
    "\4\0\3\76\5\0\1\77\7\0\1\31\7\0\2\31"+
    "\1\100\2\0\12\31\1\275\15\31\1\0\1\31\4\0"+
    "\3\76\5\0\1\77\7\0\1\31\7\0\2\31\1\100"+
    "\2\0\1\276\27\31\1\0\1\31\4\0\3\76\5\0"+
    "\1\77\7\0\1\31\7\0\2\31\1\100\2\0\4\31"+
    "\1\277\23\31\1\0\1\31\4\0\3\76\5\0\1\77"+
    "\7\0\1\31\7\0\2\31\1\100\2\0\4\31\1\125"+
    "\23\31\1\0\1\31\4\0\3\76\5\0\1\77\7\0"+
    "\1\31\7\0\2\31\1\100\2\0\2\31\1\300\25\31"+
    "\1\0\1\31\4\0\3\76\5\0\1\77\7\0\1\31"+
    "\7\0\2\31\1\100\2\0\17\31\1\277\10\31\1\0"+
    "\1\31\4\0\3\76\5\0\1\77\7\0\1\31\7\0"+
    "\2\31\1\100\2\0\20\31\1\240\7\31\1\0\1\31"+
    "\4\0\3\76\5\0\1\77\7\0\1\31\7\0\2\31"+
    "\1\100\2\0\20\31\1\301\1\302\6\31\1\0\1\31"+
    "\4\0\3\76\5\0\1\77\7\0\1\31\7\0\2\31"+
    "\1\100\2\0\1\303\27\31\1\0\1\31\4\0\3\76"+
    "\5\0\1\77\7\0\1\31\7\0\2\31\1\100\2\0"+
    "\1\31\1\304\26\31\1\0\1\31\4\0\3\76\5\0"+
    "\1\77\7\0\1\31\7\0\2\31\1\100\2\0\13\31"+
    "\1\223\14\31\1\0\1\31\4\0\3\76\5\0\1\77"+
    "\7\0\1\31\7\0\2\31\1\100\2\0\4\31\1\305"+
    "\23\31\1\0\1\31\4\0\3\76\5\0\1\77\7\0"+
    "\1\31\7\0\2\31\1\100\2\0\20\31\1\243\7\31"+
    "\1\0\1\31\4\0\3\76\5\0\1\77\7\0\1\31"+
    "\7\0\2\31\1\100\2\0\1\306\27\31\1\0\1\31"+
    "\4\0\3\76\5\0\1\77\7\0\1\31\7\0\2\31"+
    "\1\100\2\0\1\307\27\31\1\0\1\31\4\0\3\76"+
    "\5\0\1\77\7\0\1\31\7\0\2\31\1\100\2\0"+
    "\15\31\1\223\12\31\1\0\1\31\4\0\3\76\5\0"+
    "\1\77\7\0\1\31\7\0\2\31\1\100\2\0\12\31"+
    "\1\310\2\31\1\274\12\31\1\0\1\31\4\0\3\76"+
    "\5\0\1\77\7\0\1\31\7\0\2\31\1\100\2\0"+
    "\21\31\1\311\6\31\1\0\1\31\4\0\3\312\5\0"+
    "\1\77\7\0\1\31\7\0\2\313\1\314\2\0\4\313"+
    "\1\315\23\313\1\0\1\316\4\0\3\76\5\0\1\77"+
    "\7\0\1\31\7\0\2\31\1\100\2\0\6\31\1\277"+
    "\21\31\1\0\1\31\4\0\3\76\5\0\1\77\7\0"+
    "\1\31\7\0\2\31\1\100\2\0\10\31\1\317\17\31"+
    "\1\0\1\31\4\0\3\76\5\0\1\77\7\0\1\31"+
    "\7\0\2\31\1\100\2\0\12\31\1\320\15\31\1\0"+
    "\1\31\4\0\3\76\5\0\1\77\7\0\1\31\7\0"+
    "\2\31\1\100\2\0\11\31\1\321\16\31\1\0\1\31"+
    "\4\0\3\76\5\0\1\77\7\0\1\31\7\0\2\31"+
    "\1\100\2\0\23\31\1\322\4\31\1\0\1\31\4\0"+
    "\3\76\5\0\1\77\7\0\1\31\7\0\2\31\1\100"+
    "\2\0\21\31\1\323\6\31\1\0\1\31\4\0\3\76"+
    "\5\0\1\77\7\0\1\31\7\0\2\31\1\100\2\0"+
    "\12\31\1\324\15\31\1\0\1\31\4\0\3\76\5\0"+
    "\1\77\7\0\1\31\7\0\2\31\1\100\2\0\22\31"+
    "\1\325\5\31\1\0\1\31\4\0\3\76\5\0\1\77"+
    "\7\0\1\31\7\0\2\31\1\100\2\0\17\31\1\307"+
    "\10\31\1\0\1\31\4\0\3\76\5\0\1\77\7\0"+
    "\1\31\7\0\2\31\1\100\2\0\21\31\1\326\6\31"+
    "\1\0\1\31\4\0\3\76\5\0\1\77\7\0\1\31"+
    "\7\0\2\31\1\100\2\0\10\31\1\327\17\31\1\0"+
    "\1\31\4\0\3\76\5\0\1\77\7\0\1\31\7\0"+
    "\2\31\1\100\2\0\4\31\1\330\23\31\1\0\1\31"+
    "\4\0\3\76\5\0\1\77\7\0\1\31\7\0\2\31"+
    "\1\100\2\0\21\31\1\331\6\31\1\0\1\31\4\0"+
    "\3\76\5\0\1\77\7\0\1\31\7\0\2\31\1\100"+
    "\2\0\2\31\1\332\25\31\1\0\1\31\4\0\3\76"+
    "\5\0\1\77\7\0\1\31\7\0\2\31\1\100\2\0"+
    "\20\31\1\223\7\31\1\0\1\31\4\0\3\76\5\0"+
    "\1\77\7\0\1\31\7\0\2\31\1\100\2\0\15\31"+
    "\1\333\12\31\1\0\1\31\4\0\3\76\5\0\1\77"+
    "\7\0\1\31\7\0\2\31\1\100\2\0\14\31\1\334"+
    "\13\31\1\0\1\31\4\0\3\76\5\0\1\77\7\0"+
    "\1\31\7\0\2\31\1\100\2\0\4\31\1\320\23\31"+
    "\1\0\1\31\4\0\3\76\5\0\1\77\7\0\1\31"+
    "\7\0\2\31\1\100\2\0\3\31\1\277\24\31\1\0"+
    "\1\31\4\0\3\76\5\0\1\77\7\0\1\31\7\0"+
    "\2\31\1\100\2\0\1\335\27\31\1\0\1\31\4\0"+
    "\3\76\5\0\1\77\7\0\1\31\7\0\2\31\1\100"+
    "\2\0\12\31\1\336\15\31\1\0\1\31\4\0\3\250"+
    "\11\0\1\252\51\0\1\250\1\253\12\0\1\250\63\0"+
    "\3\252\1\0\1\152\2\0\1\153\2\0\1\154\2\0"+
    "\1\155\1\156\1\0\1\154\7\0\2\337\3\0\30\337"+
    "\1\0\1\340\4\0\3\254\11\0\1\255\51\0\1\254"+
    "\1\162\3\0\3\255\1\0\1\152\2\0\1\153\2\0"+
    "\1\154\2\0\1\155\1\156\1\0\1\154\7\0\2\157"+
    "\3\0\30\157\1\160\1\161\3\0\5\256\1\341\65\256"+
    "\3\342\1\0\66\342\2\0\3\341\11\0\1\343\1\0"+
    "\1\262\47\0\1\341\1\265\15\0\1\260\5\0\1\260"+
    "\45\0\1\260\16\0\1\341\5\0\1\341\45\0\1\341"+
    "\4\0\3\341\11\0\1\343\3\0\1\263\7\0\2\263"+
    "\3\0\30\263\1\0\1\263\1\265\3\0\3\344\1\0"+
    "\1\256\2\0\1\257\2\0\1\260\1\0\1\343\1\261"+
    "\1\262\1\0\1\345\7\0\2\263\3\0\30\263\1\0"+
    "\1\264\1\265\3\0\3\265\11\0\1\346\51\0\1\265"+
    "\1\162\3\0\3\266\1\0\1\152\2\0\1\153\2\0"+
    "\1\154\1\0\1\255\1\155\1\156\1\0\1\154\7\0"+
    "\2\157\3\0\30\157\1\160\1\161\1\162\3\0\3\254"+
    "\11\0\1\255\1\0\1\156\1\0\1\157\7\0\2\157"+
    "\3\0\30\157\1\0\1\157\1\162\2\0\13\166\1\270"+
    "\4\166\1\347\52\166\1\0\3\350\27\0\1\351\33\0"+
    "\1\350\4\0\3\76\5\0\1\77\7\0\1\31\7\0"+
    "\2\31\1\100\2\0\14\31\1\352\13\31\1\0\1\31"+
    "\4\0\3\76\5\0\1\77\7\0\1\31\7\0\2\31"+
    "\1\100\2\0\17\31\1\353\10\31\1\0\1\31\4\0"+
    "\3\76\5\0\1\77\7\0\1\31\7\0\2\31\1\100"+
    "\2\0\17\31\1\301\10\31\1\0\1\31\4\0\3\76"+
    "\5\0\1\77\7\0\1\31\7\0\2\31\1\100\2\0"+
    "\4\31\1\354\23\31\1\0\1\31\4\0\3\76\5\0"+
    "\1\77\7\0\1\31\7\0\2\31\1\100\2\0\11\31"+
    "\1\223\16\31\1\0\1\31\4\0\3\312\5\0\1\77"+
    "\7\0\1\31\7\0\2\313\1\314\2\0\30\313\1\0"+
    "\1\316\4\0\3\76\5\0\1\77\7\0\1\31\7\0"+
    "\2\31\1\100\2\0\7\31\1\244\20\31\1\0\1\31"+
    "\4\0\3\76\5\0\1\77\7\0\1\31\7\0\2\31"+
    "\1\100\2\0\21\31\1\223\6\31\1\0\1\31\4\0"+
    "\3\76\5\0\1\77\7\0\1\31\7\0\2\31\1\100"+
    "\2\0\10\31\1\355\17\31\1\0\1\31\4\0\3\76"+
    "\5\0\1\77\7\0\1\31\7\0\2\31\1\100\2\0"+
    "\22\31\1\356\5\31\1\0\1\31\4\0\3\76\5\0"+
    "\1\77\7\0\1\31\7\0\2\31\1\100\2\0\12\31"+
    "\1\177\15\31\1\0\1\31\4\0\3\76\5\0\1\77"+
    "\7\0\1\31\7\0\2\31\1\100\2\0\14\31\1\357"+
    "\13\31\1\0\1\31\4\0\3\76\5\0\1\77\7\0"+
    "\1\31\7\0\2\31\1\100\2\0\12\31\1\360\15\31"+
    "\1\0\1\31\4\0\3\76\5\0\1\77\7\0\1\31"+
    "\7\0\2\31\1\100\2\0\21\31\1\277\6\31\1\0"+
    "\1\31\4\0\3\76\5\0\1\77\7\0\1\31\7\0"+
    "\2\31\1\100\2\0\4\31\1\361\23\31\1\0\1\31"+
    "\4\0\3\76\5\0\1\77\7\0\1\31\7\0\2\31"+
    "\1\100\2\0\1\362\27\31\1\0\1\31\4\0\3\312"+
    "\5\0\1\77\17\0\2\363\1\314\2\0\30\363\1\0"+
    "\1\364\4\0\3\365\5\0\1\77\7\0\1\313\7\0"+
    "\2\313\1\314\2\0\30\313\1\0\1\313\4\0\3\314"+
    "\7\0\1\366\5\0\1\366\12\0\1\367\32\0\1\370"+
    "\4\0\3\365\5\0\1\77\7\0\1\313\7\0\2\313"+
    "\1\314\2\0\17\313\1\371\10\313\1\0\1\313\4\0"+
    "\3\312\5\0\1\77\7\0\1\313\7\0\2\313\1\314"+
    "\2\0\30\313\1\0\1\316\4\0\3\76\5\0\1\77"+
    "\7\0\1\31\7\0\2\31\1\100\2\0\23\31\1\372"+
    "\4\31\1\0\1\31\4\0\3\76\5\0\1\77\7\0"+
    "\1\31\7\0\2\31\1\100\2\0\1\373\27\31\1\0"+
    "\1\31\4\0\3\76\5\0\1\77\7\0\1\31\7\0"+
    "\2\31\1\100\2\0\1\374\27\31\1\0\1\31\4\0"+
    "\3\76\5\0\1\77\7\0\1\31\7\0\2\31\1\100"+
    "\2\0\4\31\1\375\23\31\1\0\1\31\4\0\3\76"+
    "\5\0\1\77\7\0\1\31\7\0\2\31\1\100\2\0"+
    "\10\31\1\376\17\31\1\0\1\31\4\0\3\76\5\0"+
    "\1\77\7\0\1\31\7\0\2\31\1\100\2\0\17\31"+
    "\1\377\10\31\1\0\1\31\4\0\3\76\5\0\1\77"+
    "\7\0\1\31\7\0\2\31\1\100\2\0\10\31\1\u0100"+
    "\17\31\1\0\1\31\4\0\3\76\5\0\1\77\7\0"+
    "\1\31\7\0\2\31\1\100\2\0\2\31\1\u0101\25\31"+
    "\1\0\1\31\4\0\3\76\5\0\1\77\7\0\1\31"+
    "\7\0\2\31\1\100\2\0\17\31\1\223\10\31\1\0"+
    "\1\31\4\0\3\76\5\0\1\77\7\0\1\31\7\0"+
    "\2\31\1\100\2\0\2\31\1\u0102\25\31\1\0\1\31"+
    "\4\0\3\76\5\0\1\77\7\0\1\31\7\0\2\31"+
    "\1\100\2\0\7\31\1\u0103\20\31\1\0\1\31\4\0"+
    "\3\76\5\0\1\77\7\0\1\31\7\0\2\31\1\100"+
    "\2\0\24\31\1\u0104\3\31\1\0\1\31\4\0\3\76"+
    "\5\0\1\77\7\0\1\31\7\0\2\31\1\100\2\0"+
    "\20\31\1\u0105\7\31\1\0\1\31\4\0\3\76\5\0"+
    "\1\77\7\0\1\31\7\0\2\31\1\100\2\0\21\31"+
    "\1\u0106\6\31\1\0\1\31\4\0\3\76\5\0\1\77"+
    "\7\0\1\31\7\0\2\31\1\100\2\0\4\31\1\214"+
    "\23\31\1\0\1\31\4\0\3\250\11\0\1\252\3\0"+
    "\1\337\7\0\2\337\3\0\30\337\1\0\1\337\1\253"+
    "\3\0\3\u0107\1\0\1\152\2\0\1\153\2\0\1\154"+
    "\1\0\1\252\1\155\1\156\1\0\1\u0108\7\0\2\337"+
    "\3\0\30\337\1\0\1\340\1\253\3\0\3\341\11\0"+
    "\1\343\51\0\1\341\1\265\12\0\1\341\63\0\3\343"+
    "\1\0\1\256\2\0\1\257\2\0\1\260\2\0\1\261"+
    "\1\262\1\0\1\260\7\0\2\263\3\0\30\263\1\0"+
    "\1\264\4\0\3\344\1\0\1\256\2\0\1\257\2\0"+
    "\1\260\1\0\1\343\1\261\1\262\1\0\1\260\7\0"+
    "\2\263\3\0\30\263\1\0\1\264\1\265\3\0\3\341"+
    "\11\0\1\343\1\0\1\262\1\0\1\263\7\0\2\263"+
    "\3\0\30\263\1\0\1\263\1\265\3\0\3\346\25\0"+
    "\2\u0109\3\0\30\u0109\1\160\1\u010a\4\0\3\351\7\0"+
    "\1\u010b\5\0\1\u010b\45\0\1\u010c\4\0\3\76\5\0"+
    "\1\77\7\0\1\31\7\0\2\31\1\100\2\0\6\31"+
    "\1\u010d\21\31\1\0\1\31\4\0\3\76\5\0\1\77"+
    "\7\0\1\31\7\0\2\31\1\100\2\0\1\u010e\27\31"+
    "\1\0\1\31\4\0\3\76\5\0\1\77\7\0\1\31"+
    "\7\0\2\31\1\100\2\0\1\377\27\31\1\0\1\31"+
    "\4\0\3\76\5\0\1\77\7\0\1\31\7\0\2\31"+
    "\1\100\2\0\14\31\1\u010f\13\31\1\0\1\31\4\0"+
    "\3\76\5\0\1\77\7\0\1\31\7\0\2\31\1\100"+
    "\2\0\12\31\1\u0110\15\31\1\0\1\31\4\0\3\76"+
    "\5\0\1\77\7\0\1\31\7\0\2\31\1\100\2\0"+
    "\3\31\1\240\24\31\1\0\1\31\4\0\3\76\5\0"+
    "\1\77\7\0\1\31\7\0\2\31\1\100\2\0\12\31"+
    "\1\u0111\15\31\1\0\1\31\4\0\3\76\5\0\1\77"+
    "\7\0\1\31\7\0\2\31\1\100\2\0\13\31\1\u0112"+
    "\14\31\1\0\1\31\4\0\3\76\5\0\1\77\7\0"+
    "\1\31\7\0\2\31\1\100\2\0\14\31\1\u0113\13\31"+
    "\1\0\1\31\4\0\3\u0114\15\0\1\363\7\0\2\363"+
    "\1\u0115\2\0\30\363\1\0\1\363\4\0\3\312\5\0"+
    "\1\77\7\0\1\363\7\0\2\363\1\314\2\0\30\363"+
    "\1\0\1\364\4\0\3\365\5\0\1\77\21\0\1\314"+
    "\33\0\1\365\4\0\3\366\30\0\1\u0116\32\0\1\366"+
    "\4\0\3\u0117\27\0\1\u0118\33\0\1\u0117\4\0\3\370"+
    "\7\0\1\366\5\0\1\366\12\0\1\u0119\32\0\1\370"+
    "\4\0\3\365\5\0\1\77\7\0\1\313\7\0\2\313"+
    "\1\314\2\0\5\313\1\u011a\22\313\1\0\1\313\4\0"+
    "\3\76\5\0\1\77\7\0\1\31\7\0\2\31\1\100"+
    "\2\0\4\31\1\223\23\31\1\0\1\31\4\0\3\76"+
    "\5\0\1\77\7\0\1\31\7\0\2\31\1\100\2\0"+
    "\6\31\1\372\21\31\1\0\1\31\4\0\3\76\5\0"+
    "\1\77\7\0\1\31\7\0\2\31\1\100\2\0\21\31"+
    "\1\u011b\6\31\1\0\1\31\4\0\3\76\5\0\1\77"+
    "\7\0\1\31\7\0\2\31\1\100\2\0\2\31\1\u011c"+
    "\25\31\1\0\1\31\4\0\3\76\5\0\1\77\7\0"+
    "\1\31\7\0\2\31\1\100\2\0\2\31\1\u011d\25\31"+
    "\1\0\1\31\4\0\3\76\5\0\1\77\7\0\1\31"+
    "\7\0\2\31\1\100\2\0\14\31\1\223\13\31\1\0"+
    "\1\31\4\0\3\76\5\0\1\77\7\0\1\31\7\0"+
    "\2\31\1\100\2\0\2\31\1\223\25\31\1\0\1\31"+
    "\4\0\3\76\5\0\1\77\7\0\1\31\7\0\2\31"+
    "\1\100\2\0\21\31\1\u011e\6\31\1\0\1\31\4\0"+
    "\3\76\5\0\1\77\7\0\1\31\7\0\2\31\1\100"+
    "\2\0\7\31\1\125\20\31\1\0\1\31\4\0\3\76"+
    "\5\0\1\77\7\0\1\31\7\0\2\31\1\100\2\0"+
    "\17\31\1\u011f\10\31\1\0\1\31\4\0\3\76\5\0"+
    "\1\77\7\0\1\31\7\0\2\31\1\100\2\0\20\31"+
    "\1\244\7\31\1\0\1\31\4\0\3\76\5\0\1\77"+
    "\7\0\1\31\7\0\2\31\1\100\2\0\10\31\1\u0120"+
    "\17\31\1\0\1\31\4\0\3\76\5\0\1\77\7\0"+
    "\1\31\7\0\2\31\1\100\2\0\10\31\1\u0121\17\31"+
    "\1\0\1\31\4\0\3\u0107\1\0\1\152\2\0\1\153"+
    "\2\0\1\154\1\0\1\252\1\155\1\156\1\0\1\154"+
    "\7\0\2\337\3\0\30\337\1\0\1\340\1\253\3\0"+
    "\3\250\11\0\1\252\1\0\1\156\1\0\1\337\7\0"+
    "\2\337\3\0\30\337\1\0\1\337\1\253\3\0\3\265"+
    "\11\0\1\346\3\0\1\u0109\7\0\2\u0109\3\0\30\u0109"+
    "\1\0\1\u0109\1\162\3\0\3\u0122\11\0\1\346\3\0"+
    "\1\u0109\7\0\2\u0109\3\0\30\u0109\1\160\1\u010a\1\162"+
    "\3\0\3\u010b\30\0\1\u0123\32\0\1\u010b\4\0\3\u010c"+
    "\7\0\1\u010b\5\0\1\u010b\12\0\1\u0123\32\0\1\u010c"+
    "\4\0\3\76\5\0\1\77\7\0\1\31\7\0\2\31"+
    "\1\100\2\0\2\31\1\301\25\31\1\0\1\31\4\0"+
    "\3\76\5\0\1\77\7\0\1\31\7\0\2\31\1\100"+
    "\2\0\22\31\1\372\5\31\1\0\1\31\4\0\3\76"+
    "\5\0\1\77\7\0\1\31\7\0\2\31\1\100\2\0"+
    "\21\31\1\u011d\6\31\1\0\1\31\4\0\3\76\5\0"+
    "\1\77\7\0\1\31\7\0\2\31\1\100\2\0\26\31"+
    "\1\244\1\31\1\0\1\31\4\0\3\76\5\0\1\77"+
    "\7\0\1\31\7\0\2\31\1\100\2\0\4\31\1\u0124"+
    "\23\31\1\0\1\31\4\0\3\76\5\0\1\77\7\0"+
    "\1\31\7\0\2\31\1\100\2\0\2\31\1\u0125\25\31"+
    "\1\0\1\31\4\0\3\u0114\27\0\1\u0115\33\0\1\u0114"+
    "\4\0\3\u0115\7\0\1\u0126\5\0\1\u0126\12\0\1\367"+
    "\32\0\1\u0115\4\0\3\u0127\27\0\1\u0128\33\0\1\u0127"+
    "\4\0\3\u0118\30\0\1\u0129\32\0\1\u0118\4\0\3\365"+
    "\5\0\1\77\7\0\1\313\7\0\2\313\1\314\2\0"+
    "\1\u012a\27\313\1\0\1\313\4\0\3\76\5\0\1\77"+
    "\7\0\1\31\7\0\2\31\1\100\2\0\4\31\1\u011d"+
    "\23\31\1\0\1\31\4\0\3\76\5\0\1\77\7\0"+
    "\1\31\7\0\2\31\1\100\2\0\21\31\1\u012b\6\31"+
    "\1\0\1\31\4\0\3\76\5\0\1\77\7\0\1\31"+
    "\7\0\2\31\1\100\2\0\5\31\1\u012c\22\31\1\0"+
    "\1\31\4\0\3\76\5\0\1\77\7\0\1\31\7\0"+
    "\2\31\1\100\2\0\15\31\1\u012d\12\31\1\0\1\31"+
    "\4\0\3\76\5\0\1\77\7\0\1\31\7\0\2\31"+
    "\1\100\2\0\4\31\1\u012e\23\31\1\0\1\31\4\0"+
    "\3\76\5\0\1\77\7\0\1\31\7\0\2\31\1\100"+
    "\2\0\12\31\1\372\15\31\1\0\1\31\4\0\3\u0122"+
    "\11\0\1\346\13\0\2\u0109\3\0\30\u0109\1\160\1\u010a"+
    "\1\162\3\0\3\76\5\0\1\77\7\0\1\31\7\0"+
    "\2\31\1\100\2\0\14\31\1\u012f\13\31\1\0\1\31"+
    "\4\0\3\76\5\0\1\77\7\0\1\31\7\0\2\31"+
    "\1\100\2\0\4\31\1\u0130\23\31\1\0\1\31\4\0"+
    "\3\u0126\30\0\1\u0117\32\0\1\u0126\4\0\3\u0128\7\0"+
    "\1\u010b\5\0\1\u010b\12\0\1\u0129\32\0\1\u0128\4\0"+
    "\3\365\5\0\1\77\7\0\1\313\7\0\2\313\1\314"+
    "\2\0\2\313\1\u0131\25\313\1\0\1\313\4\0\3\76"+
    "\5\0\1\77\7\0\1\31\7\0\2\31\1\100\2\0"+
    "\4\31\1\u0132\23\31\1\0\1\31\4\0\3\76\5\0"+
    "\1\77\7\0\1\31\7\0\2\31\1\100\2\0\16\31"+
    "\1\223\11\31\1\0\1\31\4\0\3\76\5\0\1\77"+
    "\7\0\1\31\7\0\2\31\1\100\2\0\14\31\1\u0133"+
    "\13\31\1\0\1\31\4\0\3\76\5\0\1\77\7\0"+
    "\1\31\7\0\2\31\1\100\2\0\14\31\1\301\13\31"+
    "\1\0\1\31\4\0\3\76\5\0\1\77\7\0\1\31"+
    "\7\0\2\31\1\100\2\0\21\31\1\240\6\31\1\0"+
    "\1\31\4\0\3\76\5\0\1\77\7\0\1\31\7\0"+
    "\2\31\1\100\2\0\15\31\1\u0134\12\31\1\0\1\31"+
    "\4\0\3\365\5\0\1\77\7\0\1\313\7\0\2\313"+
    "\1\314\2\0\4\313\1\u0135\23\313\1\0\1\313\4\0"+
    "\3\76\5\0\1\77\7\0\1\31\7\0\2\31\1\100"+
    "\2\0\3\31\1\u011d\24\31\1\0\1\31\4\0\3\76"+
    "\5\0\1\77\7\0\1\31\7\0\2\31\1\100\2\0"+
    "\10\31\1\u0136\17\31\1\0\1\31\4\0\3\76\5\0"+
    "\1\77\7\0\1\31\7\0\2\31\1\100\2\0\5\31"+
    "\1\223\22\31\1\0\1\31\4\0\3\76\5\0\1\77"+
    "\7\0\1\31\7\0\2\31\1\100\2\0\27\31\1\u0137"+
    "\1\0\1\31\4\0\3\76\5\0\1\77\7\0\1\31"+
    "\7\0\2\31\1\100\2\0\4\31\1\u0138\23\31\1\0"+
    "\1\31\4\0\3\76\5\0\1\77\7\0\1\31\7\0"+
    "\2\31\1\100\2\0\3\31\1\223\24\31\1\0\1\31"+
    "\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16048];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\2\11\2\1\1\11\4\1\2\11"+
    "\3\1\1\11\3\1\2\11\23\1\3\11\1\0\3\11"+
    "\2\0\1\11\4\1\1\0\1\11\1\0\50\1\11\0"+
    "\1\11\2\1\1\11\1\0\1\1\2\0\56\1\3\0"+
    "\1\11\15\0\21\1\1\0\1\1\1\0\22\1\10\0"+
    "\1\11\2\0\11\1\4\0\1\1\1\0\16\1\6\0"+
    "\7\1\2\0\1\1\2\0\11\1\1\0\1\11\2\1"+
    "\3\0\1\11\17\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private File output;
  private FileWriter writer;

  public void fecharOutput() throws IOException {
    this.writer.close();
  }

  private void imprimir(String descricao, String lexema) throws IOException {
    System.out.println(lexema + " - " + descricao);
    this.writer.append(lexema + " - " + descricao + "\n");
  }

  LexicalAnalyzer(java.io.Reader in, String inputname) throws IOException {
	String rootPath = Paths.get("").toAbsolutePath().toString();
	this.output = new File(rootPath + "\\" + inputname +" - output.txt");
	output.delete();
	output.createNewFile();
	this.writer = new FileWriter(this.output);
	this.zzReader = in;
  }





  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return ;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Caractere inválido " + yytext());
            }
            // fall through
          case 43: break;
          case 2:
            { 
            }
            // fall through
          case 44: break;
          case 3:
            { imprimir("Operador lógico", yytext());
            }
            // fall through
          case 45: break;
          case 4:
            { imprimir("Operador aritmético", yytext());
            }
            // fall through
          case 46: break;
          case 5:
            { imprimir("Operador de bits", yytext());
            }
            // fall through
          case 47: break;
          case 6:
            { imprimir("Parêntese aberto", yytext());
            }
            // fall through
          case 48: break;
          case 7:
            { imprimir("Parêntese fechado", yytext());
            }
            // fall through
          case 49: break;
          case 8:
            { imprimir("Separador vírgula", yytext());
            }
            // fall through
          case 50: break;
          case 9:
            { imprimir("Separador ponto", yytext());
            }
            // fall through
          case 51: break;
          case 10:
            { imprimir("Comentário", yytext());
            }
            // fall through
          case 52: break;
          case 11:
            { imprimir("Constante tipo número inteiro", yytext());
            }
            // fall through
          case 53: break;
          case 12:
            { imprimir("Separador dois-pontos", yytext());
            }
            // fall through
          case 54: break;
          case 13:
            { imprimir("Separador ponto e vírgula", yytext());
            }
            // fall through
          case 55: break;
          case 14:
            { imprimir("Operador comparativo", yytext());
            }
            // fall through
          case 56: break;
          case 15:
            { imprimir("Operador de atribuição", yytext());
            }
            // fall through
          case 57: break;
          case 16:
            { imprimir("Operador ternário", yytext());
            }
            // fall through
          case 58: break;
          case 17:
            { imprimir("Anotação do java", yytext());
            }
            // fall through
          case 59: break;
          case 18:
            { imprimir("Identificador", yytext());
            }
            // fall through
          case 60: break;
          case 19:
            { imprimir("Colchete aberto", yytext());
            }
            // fall through
          case 61: break;
          case 20:
            { imprimir("Colchete fechado", yytext());
            }
            // fall through
          case 62: break;
          case 21:
            { imprimir("Chave aberta", yytext());
            }
            // fall through
          case 63: break;
          case 22:
            { imprimir("Chave fechada", yytext());
            }
            // fall through
          case 64: break;
          case 23:
            { imprimir("Operador unário", yytext());
            }
            // fall through
          case 65: break;
          case 24:
            { imprimir("Constante tipo string", yytext());
            }
            // fall through
          case 66: break;
          case 25:
            { imprimir("Constante tipo float", yytext());
            }
            // fall through
          case 67: break;
          case 26:
            { imprimir("Operador de shift", yytext());
            }
            // fall through
          case 68: break;
          case 27:
            { imprimir("Método", yytext());
            }
            // fall through
          case 69: break;
          case 28:
            { imprimir("Palavra reservada " + yytext() + " (loop)", yytext());
            }
            // fall through
          case 70: break;
          case 29:
            { imprimir("Palavra reservada " + yytext() + " (desvio condicional)", yytext());
            }
            // fall through
          case 71: break;
          case 30:
            { imprimir("Constante de uma matriz", yytext());
            }
            // fall through
          case 72: break;
          case 31:
            { imprimir("Constante tipo char", yytext());
            }
            // fall through
          case 73: break;
          case 32:
            { imprimir("Palavra reservada " + yytext() + " (tipo)", yytext());
            }
            // fall through
          case 74: break;
          case 33:
            { imprimir("Palavra reservada " + yytext(), yytext());
            }
            // fall through
          case 75: break;
          case 34:
            { imprimir("Palavra reservada " + yytext() + " (exceção)", yytext());
            }
            // fall through
          case 76: break;
          case 35:
            { imprimir("Constante de um array", yytext());
            }
            // fall through
          case 77: break;
          case 36:
            { imprimir("Posição do array", yytext());
            }
            // fall through
          case 78: break;
          case 37:
            { imprimir("Palavra reservada " + yytext() + " (valor literal)", yytext());
            }
            // fall through
          case 79: break;
          case 38:
            { imprimir("Declaração de array", yytext());
            }
            // fall through
          case 80: break;
          case 39:
            { imprimir("Tipo não primitivo " + yytext(), yytext());
            }
            // fall through
          case 81: break;
          case 40:
            { imprimir("Palavra reservada " + yytext() + " (modificador de acesso)", yytext());
            }
            // fall through
          case 82: break;
          case 41:
            { imprimir("Posição da matriz", yytext());
            }
            // fall through
          case 83: break;
          case 42:
            { imprimir("Declaração de matriz", yytext());
            }
            // fall through
          case 84: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
