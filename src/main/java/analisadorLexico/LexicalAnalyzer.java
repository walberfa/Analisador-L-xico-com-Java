/* The following code was generated by JFlex 1.6.1 */

package analisadorLexico;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/JulhoFamilia/Desktop/PROG/src/ifce/lexico/exemplo/language.lex</tt>
 */
class LexicalAnalyzer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\0\1\33\1\37\1\40\1\41\1\37\22\0\1\32\1\62"+
    "\1\35\2\0\1\57\1\63\1\34\1\44\1\45\1\55\1\53\1\42"+
    "\1\54\1\36\1\56\1\66\11\66\1\0\1\43\1\60\1\52\1\61"+
    "\2\0\22\65\1\31\7\65\1\46\1\0\1\47\1\0\1\65\1\0"+
    "\1\1\1\2\1\6\1\20\1\7\1\21\1\24\1\15\1\16\1\65"+
    "\1\13\1\11\1\22\1\12\1\10\1\25\1\65\1\5\1\3\1\4"+
    "\1\17\1\26\1\27\1\23\1\14\1\30\1\50\1\64\1\51\7\0"+
    "\1\40\u1fa2\0\1\40\1\40\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\22\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\3\15\1\16"+
    "\1\15\2\1\1\17\1\1\1\3\1\20\2\2\2\0"+
    "\27\2\1\21\2\2\1\22\13\2\2\0\1\23\1\24"+
    "\5\0\1\25\3\0\1\26\1\0\2\16\2\27\1\17"+
    "\2\2\1\30\1\0\12\2\1\31\15\2\1\32\2\2"+
    "\1\33\4\2\1\22\13\2\1\34\16\0\1\35\1\0"+
    "\1\16\2\2\1\36\2\2\1\33\7\2\1\37\11\2"+
    "\1\0\13\2\11\0\1\2\1\0\6\2\1\31\6\2"+
    "\1\40\1\0\2\2\1\32\6\2\1\0\1\16\1\2"+
    "\1\0\6\2\1\0\1\36\5\2\1\41\1\2\1\42"+
    "\1\43\5\2\1\44\1\0\12\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[279];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\67\0\u044c\0\u0483\0\u04ba"+
    "\0\67\0\67\0\67\0\67\0\67\0\u04f1\0\67\0\67"+
    "\0\u0528\0\u055f\0\u0596\0\u05cd\0\67\0\u0604\0\u063b\0\67"+
    "\0\u0672\0\u06a9\0\u0596\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc"+
    "\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974"+
    "\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c"+
    "\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u01ef\0\u0cad"+
    "\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65"+
    "\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0483\0\67"+
    "\0\67\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2\0\67\0\u10f9"+
    "\0\u1130\0\u1167\0\67\0\u04ba\0\u119e\0\u11d5\0\67\0\u120c"+
    "\0\u01ef\0\u1243\0\u127a\0\u074e\0\u12b1\0\u12e8\0\u131f\0\u1356"+
    "\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u01ef"+
    "\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f"+
    "\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u01ef\0\u17d9\0\u1810"+
    "\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u01ef\0\u195a\0\u1991"+
    "\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49"+
    "\0\u1b80\0\67\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca"+
    "\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82"+
    "\0\67\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003"+
    "\0\u203a\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d\0\u2184\0\u21bb"+
    "\0\u01ef\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305\0\u233c"+
    "\0\u2373\0\u23aa\0\u23e1\0\u2418\0\u244f\0\u2486\0\u24bd\0\u24f4"+
    "\0\u252b\0\u2562\0\u2599\0\u25d0\0\u2607\0\u263e\0\u2675\0\u26ac"+
    "\0\u26e3\0\u271a\0\u2751\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u2864"+
    "\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977\0\u29ae\0\u29e5\0\u2a1c"+
    "\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66\0\u2b9d\0\u2bd4"+
    "\0\u2c0b\0\u2c42\0\u2c79\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55\0\u2d8c"+
    "\0\u2dc3\0\u2dfa\0\67\0\u2e31\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d"+
    "\0\u2f44\0\u2f7b\0\u2fb2\0\u2fe9\0\u3020\0\u3057\0\u308e\0\u30c5"+
    "\0\u30fc\0\u3133\0\u01ef\0\u316a\0\u01ef\0\67\0\u31a1\0\u31d8"+
    "\0\u320f\0\u3246\0\u327d\0\67\0\u32b4\0\u32eb\0\u3322\0\u3359"+
    "\0\u3390\0\u33c7\0\u33fe\0\u3435\0\u346c\0\u34a3\0\u34da";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[279];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\3\12\1\15\1\12\1\16\1\17"+
    "\2\12\1\20\1\21\1\22\1\23\1\12\1\24\2\25"+
    "\1\26\1\27\1\30\1\25\2\0\1\2\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\12\1\53\70\0\1\12\1\54\1\55\26\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\4\12\1\60"+
    "\2\12\1\61\3\12\1\62\15\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\1\0\3\12\1\63\7\12\1\64"+
    "\1\65\1\12\1\66\7\12\1\67\2\12\12\0\1\56"+
    "\1\0\1\57\15\0\3\12\1\0\4\12\1\70\7\12"+
    "\1\71\14\12\12\0\1\56\1\0\1\57\15\0\3\12"+
    "\1\0\6\12\1\72\22\12\12\0\1\56\1\0\1\57"+
    "\15\0\3\12\1\0\1\73\6\12\1\74\1\75\3\12"+
    "\1\76\14\12\12\0\1\56\1\0\1\57\15\0\3\12"+
    "\1\0\10\12\1\77\1\100\10\12\1\101\6\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\31\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\7\12\1\102"+
    "\21\12\12\0\1\56\1\0\1\57\15\0\3\12\1\0"+
    "\1\103\5\12\1\104\7\12\1\105\12\12\12\0\1\56"+
    "\1\0\1\57\15\0\3\12\1\0\11\12\1\106\6\12"+
    "\1\107\1\110\7\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\1\0\6\12\1\111\1\112\21\12\12\0\1\56"+
    "\1\0\1\57\15\0\3\12\1\0\1\113\6\12\1\114"+
    "\1\115\4\12\1\116\13\12\12\0\1\56\1\0\1\57"+
    "\15\0\3\12\1\0\7\12\1\117\21\12\12\0\1\56"+
    "\1\0\1\57\15\0\3\12\1\0\1\120\3\12\1\121"+
    "\11\12\1\122\12\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\1\0\7\12\1\123\21\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\1\0\14\12\1\124\14\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\3\12\1\125"+
    "\25\12\12\0\1\56\1\0\1\57\15\0\3\12\40\126"+
    "\1\0\26\126\35\127\1\130\31\127\55\0\1\131\6\0"+
    "\1\131\1\0\1\131\1\0\31\132\2\0\1\133\1\134"+
    "\1\135\11\0\1\136\1\137\2\0\1\140\1\141\6\0"+
    "\1\142\1\132\1\141\53\0\1\143\67\0\1\143\1\53"+
    "\6\0\1\53\1\0\1\53\36\0\1\144\30\0\37\145"+
    "\3\0\13\145\1\146\11\145\60\0\1\147\67\0\1\150"+
    "\70\0\1\50\4\0\31\12\4\0\1\144\5\0\1\56"+
    "\1\0\1\57\15\0\1\151\2\12\1\0\2\12\1\152"+
    "\26\12\12\0\1\56\1\0\1\57\15\0\3\12\1\0"+
    "\2\12\1\153\26\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\37\56\3\0\3\56\1\154\21\56\55\0\1\155"+
    "\6\0\1\155\1\0\1\155\1\0\6\12\1\156\22\12"+
    "\12\0\1\56\1\0\1\57\15\0\3\12\1\0\7\12"+
    "\1\157\21\12\12\0\1\56\1\0\1\57\15\0\3\12"+
    "\1\0\3\12\1\160\25\12\12\0\1\56\1\0\1\57"+
    "\15\0\3\12\1\0\1\161\3\12\1\162\24\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\11\12\1\163"+
    "\17\12\12\0\1\56\1\0\1\57\15\0\3\12\1\0"+
    "\7\12\1\164\21\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\1\0\24\12\1\165\4\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\1\0\15\12\1\166\13\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\1\167\12\12"+
    "\1\170\2\12\1\171\12\12\12\0\1\56\1\0\1\57"+
    "\15\0\3\12\1\0\4\12\1\172\10\12\1\173\13\12"+
    "\12\0\1\56\1\0\1\57\15\0\3\12\1\0\3\12"+
    "\1\174\25\12\12\0\1\56\1\0\1\57\15\0\3\12"+
    "\1\0\2\12\1\175\1\176\25\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\1\0\11\12\1\177\17\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\1\200\30\12"+
    "\12\0\1\56\1\0\1\57\15\0\3\12\1\0\1\201"+
    "\30\12\12\0\1\56\1\0\1\57\15\0\3\12\1\0"+
    "\2\12\1\175\26\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\1\0\16\12\1\202\12\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\1\0\3\12\1\203\25\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\11\12\1\204"+
    "\17\12\12\0\1\56\1\0\1\57\15\0\3\12\1\0"+
    "\3\12\1\205\25\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\1\0\26\12\1\206\2\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\1\0\10\12\1\207\20\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\2\12\1\210"+
    "\1\211\25\12\12\0\1\56\1\0\1\57\15\0\3\12"+
    "\1\0\24\12\1\212\4\12\12\0\1\56\1\0\1\57"+
    "\15\0\3\12\1\0\20\12\1\213\10\12\12\0\1\56"+
    "\1\0\1\57\15\0\3\12\1\0\16\12\1\214\12\12"+
    "\12\0\1\56\1\0\1\57\15\0\3\12\1\0\10\12"+
    "\1\215\20\12\12\0\1\56\1\0\1\57\15\0\3\12"+
    "\1\0\4\12\1\216\24\12\12\0\1\56\1\0\1\57"+
    "\15\0\3\12\1\0\7\12\1\217\21\12\12\0\1\56"+
    "\1\0\1\57\15\0\3\12\1\0\11\12\1\220\17\12"+
    "\12\0\1\56\1\0\1\57\15\0\3\12\1\0\3\12"+
    "\1\221\25\12\12\0\1\56\1\0\1\57\15\0\3\12"+
    "\1\0\5\12\1\222\23\12\12\0\1\56\1\0\1\57"+
    "\15\0\3\12\1\0\7\12\1\223\5\12\1\224\13\12"+
    "\12\0\1\56\1\0\1\57\15\0\3\12\1\0\1\12"+
    "\1\225\27\12\12\0\1\56\1\0\1\57\15\0\3\12"+
    "\1\0\10\12\1\226\4\12\1\227\13\12\12\0\1\56"+
    "\1\0\1\57\15\0\3\12\1\0\15\12\1\230\13\12"+
    "\12\0\1\56\1\0\1\57\15\0\3\12\1\0\4\12"+
    "\1\231\24\12\12\0\1\56\1\0\1\57\15\0\3\12"+
    "\34\0\1\232\33\0\31\132\1\233\7\0\1\234\6\0"+
    "\1\137\12\0\3\132\40\235\1\0\26\235\35\134\1\236"+
    "\31\134\55\0\1\236\6\0\1\236\1\0\1\236\1\0"+
    "\31\237\2\0\1\240\1\241\1\242\12\0\1\243\2\0"+
    "\1\244\1\245\6\0\1\246\1\237\1\245\55\0\1\141"+
    "\6\0\1\141\1\0\1\141\32\0\1\247\3\0\1\135"+
    "\3\0\1\250\6\0\1\251\16\0\31\132\1\233\3\0"+
    "\1\135\3\0\1\234\6\0\1\137\12\0\3\132\37\145"+
    "\3\0\25\145\37\146\3\252\13\146\1\253\11\146\61\0"+
    "\1\147\6\0\3\12\1\254\25\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\1\0\6\12\1\255\22\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\47\0\1\256\20\0"+
    "\1\257\30\12\12\0\1\56\1\0\1\57\15\0\3\12"+
    "\1\0\10\12\1\260\20\12\12\0\1\56\1\0\1\57"+
    "\15\0\3\12\1\0\6\12\1\261\22\12\12\0\1\56"+
    "\1\0\1\57\15\0\3\12\1\0\3\12\1\262\25\12"+
    "\12\0\1\56\1\0\1\57\15\0\3\12\1\0\15\12"+
    "\1\263\13\12\12\0\1\56\1\0\1\57\15\0\3\12"+
    "\1\0\5\12\1\264\23\12\12\0\1\56\1\0\1\57"+
    "\15\0\3\12\1\0\4\12\1\265\24\12\12\0\1\56"+
    "\1\0\1\57\15\0\3\12\1\0\6\12\1\266\22\12"+
    "\12\0\1\56\1\0\1\57\15\0\3\12\1\0\3\12"+
    "\1\267\25\12\12\0\1\56\1\0\1\57\15\0\3\12"+
    "\1\0\11\12\1\270\17\12\12\0\1\56\1\0\1\57"+
    "\15\0\3\12\1\0\6\12\1\271\22\12\12\0\1\56"+
    "\1\0\1\57\15\0\3\12\1\0\7\12\1\272\21\12"+
    "\12\0\1\56\1\0\1\57\15\0\3\12\1\0\2\12"+
    "\1\206\26\12\12\0\1\56\1\0\1\57\15\0\3\12"+
    "\1\0\16\12\1\273\12\12\12\0\1\56\1\0\1\57"+
    "\15\0\3\12\1\0\6\12\1\107\22\12\12\0\1\56"+
    "\1\0\1\57\15\0\3\12\1\0\5\12\1\274\23\12"+
    "\12\0\1\56\1\0\1\57\15\0\3\12\1\0\2\12"+
    "\1\275\1\276\25\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\1\0\2\12\1\173\26\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\1\0\4\12\1\261\24\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\21\12\1\206"+
    "\7\12\12\0\1\56\1\0\1\57\15\0\3\12\1\0"+
    "\6\12\1\277\22\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\1\0\23\12\1\261\5\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\1\0\15\12\1\300\13\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\10\12\1\271"+
    "\20\12\12\0\1\56\1\0\1\57\15\0\3\12\1\0"+
    "\3\12\1\301\25\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\1\0\6\12\1\302\22\12\12\0\1\56\1\0"+
    "\1\303\15\0\3\12\1\0\7\12\1\255\1\304\20\12"+
    "\12\0\1\56\1\0\1\57\15\0\3\12\1\0\1\305"+
    "\30\12\12\0\1\56\1\0\1\57\15\0\3\12\1\0"+
    "\1\12\1\306\27\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\1\0\2\12\1\171\26\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\1\0\1\265\30\12\12\0\1\56"+
    "\1\0\1\57\15\0\3\12\1\0\1\307\30\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\7\12\1\206"+
    "\21\12\12\0\1\56\1\0\1\57\15\0\3\12\1\0"+
    "\12\12\1\310\16\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\1\0\3\12\1\311\25\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\1\0\25\12\1\312\3\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\10\12\1\313"+
    "\20\12\12\0\1\56\1\0\1\57\15\0\3\12\1\0"+
    "\1\314\30\12\12\0\1\56\1\0\1\57\15\0\3\12"+
    "\1\0\17\12\1\261\11\12\12\0\1\56\1\0\1\57"+
    "\15\0\3\12\1\0\10\12\1\315\20\12\12\0\1\56"+
    "\1\0\1\57\15\0\3\12\1\0\15\12\1\316\13\12"+
    "\12\0\1\56\1\0\1\57\15\0\3\12\32\0\1\233"+
    "\7\0\1\234\25\0\31\132\1\234\1\0\1\133\1\134"+
    "\1\135\11\0\1\136\3\0\1\140\1\141\6\0\1\142"+
    "\1\132\1\141\34\0\1\236\64\0\1\247\7\0\1\250"+
    "\6\0\1\251\16\0\31\237\1\317\7\0\1\320\6\0"+
    "\1\243\12\0\3\237\40\321\1\0\26\321\35\241\1\322"+
    "\31\241\55\0\1\322\6\0\1\322\1\0\1\322\32\0"+
    "\1\323\7\0\1\324\6\0\1\137\72\0\1\245\6\0"+
    "\1\245\1\0\1\245\32\0\1\317\3\0\1\242\3\0"+
    "\1\320\6\0\1\243\16\0\31\237\1\317\3\0\1\242"+
    "\3\0\1\320\6\0\1\243\12\0\3\237\32\0\1\247"+
    "\7\0\1\250\25\0\31\325\1\250\1\0\1\133\1\134"+
    "\1\135\15\0\1\140\1\141\6\0\1\326\1\325\1\141"+
    "\55\252\1\327\11\252\37\146\3\252\13\146\1\253\1\145"+
    "\10\146\1\0\4\12\1\330\24\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\1\0\4\12\1\275\24\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\46\0\1\331\21\0"+
    "\12\12\1\206\16\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\1\0\6\12\1\332\22\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\1\0\31\12\12\0\1\56\1\0"+
    "\1\303\15\0\3\12\1\0\15\12\1\333\13\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\5\12\1\334"+
    "\23\12\12\0\1\56\1\0\1\57\15\0\3\12\1\0"+
    "\14\12\1\335\14\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\1\0\3\12\1\261\25\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\1\0\4\12\1\206\24\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\5\12\1\336"+
    "\23\12\12\0\1\56\1\0\1\57\15\0\3\12\1\0"+
    "\2\12\1\337\26\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\1\0\26\12\1\340\2\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\1\0\4\12\1\341\24\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\14\12\1\170"+
    "\14\12\12\0\1\56\1\0\1\57\15\0\3\12\1\0"+
    "\3\12\1\206\25\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\1\0\15\12\1\342\13\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\1\0\11\12\1\343\17\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\25\12\1\344"+
    "\3\12\12\0\1\56\1\0\1\57\15\0\3\12\1\0"+
    "\1\345\30\12\12\0\1\56\1\0\1\57\15\0\3\12"+
    "\1\0\4\12\1\346\24\12\12\0\1\56\1\0\1\57"+
    "\15\0\3\12\47\0\1\347\5\0\1\350\6\0\1\350"+
    "\1\0\1\350\1\0\6\12\1\351\22\12\12\0\1\56"+
    "\1\0\1\57\15\0\3\12\1\0\16\12\1\352\12\12"+
    "\12\0\1\56\1\0\1\57\15\0\3\12\1\0\10\12"+
    "\1\160\20\12\12\0\1\56\1\0\1\57\15\0\3\12"+
    "\1\0\10\12\1\353\20\12\12\0\1\56\1\0\1\57"+
    "\15\0\3\12\1\0\1\354\30\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\1\0\6\12\1\355\22\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\1\356\30\12"+
    "\12\0\1\56\1\0\1\57\15\0\3\12\1\0\15\12"+
    "\1\357\13\12\12\0\1\56\1\0\1\57\15\0\3\12"+
    "\1\0\3\12\1\360\25\12\12\0\1\56\1\0\1\57"+
    "\15\0\3\12\1\0\6\12\1\216\22\12\12\0\1\56"+
    "\1\0\1\57\15\0\3\12\1\0\11\12\1\361\17\12"+
    "\12\0\1\56\1\0\1\57\15\0\3\12\32\0\1\317"+
    "\7\0\1\320\25\0\31\237\1\320\1\0\1\240\1\241"+
    "\1\242\15\0\1\244\1\245\6\0\1\246\1\237\1\245"+
    "\34\0\1\322\64\0\1\317\7\0\1\320\6\0\1\243"+
    "\47\0\1\323\7\0\1\324\25\0\31\362\1\324\15\0"+
    "\1\136\13\0\2\362\2\0\31\325\1\247\7\0\1\250"+
    "\6\0\1\251\12\0\3\325\1\0\31\325\1\247\3\0"+
    "\1\135\3\0\1\250\6\0\1\251\12\0\3\325\55\252"+
    "\1\327\1\363\10\252\1\0\1\364\30\12\12\0\1\56"+
    "\1\0\1\57\15\0\3\12\55\0\1\365\6\0\1\365"+
    "\1\0\1\365\1\0\1\341\30\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\1\0\5\12\1\206\23\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\3\12\1\366"+
    "\25\12\12\0\1\56\1\0\1\57\15\0\3\12\1\0"+
    "\4\12\1\367\24\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\1\0\14\12\1\107\14\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\1\0\15\12\1\370\13\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\2\12\1\170"+
    "\26\12\12\0\1\56\1\0\1\57\15\0\3\12\1\0"+
    "\11\12\1\206\17\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\1\0\11\12\1\371\17\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\1\0\17\12\1\173\11\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\6\12\1\206"+
    "\22\12\12\0\1\56\1\0\1\57\15\0\3\12\1\0"+
    "\11\12\1\372\17\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\1\0\20\12\1\373\10\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\46\0\1\374\67\0\1\375\20\0"+
    "\21\12\1\376\7\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\1\0\10\12\1\377\20\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\1\0\10\12\1\u0100\20\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\23\12\1\344"+
    "\5\12\12\0\1\56\1\0\1\57\15\0\3\12\1\0"+
    "\5\12\1\u0101\23\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\1\0\3\12\1\u0102\25\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\1\0\5\12\1\u0103\23\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\15\12\1\u0104"+
    "\13\12\12\0\1\56\1\0\1\57\15\0\3\12\1\0"+
    "\23\12\1\u0105\5\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\1\0\31\362\1\323\7\0\1\324\6\0\1\137"+
    "\12\0\3\362\1\0\5\12\1\275\23\12\12\0\1\56"+
    "\1\0\1\57\15\0\3\12\47\0\1\u0106\20\0\20\12"+
    "\1\u0107\10\12\12\0\1\56\1\0\1\57\15\0\3\12"+
    "\1\0\7\12\1\u0108\21\12\12\0\1\56\1\0\1\57"+
    "\15\0\3\12\1\0\6\12\1\u0109\22\12\12\0\1\56"+
    "\1\0\1\57\15\0\3\12\1\0\16\12\1\344\12\12"+
    "\12\0\1\56\1\0\1\57\15\0\3\12\1\0\5\12"+
    "\1\u010a\23\12\12\0\1\56\1\0\1\57\15\0\3\12"+
    "\1\0\1\u010b\30\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\47\0\1\u010c\65\0\1\u010d\21\0\6\12\1\u010e"+
    "\22\12\12\0\1\56\1\0\1\57\15\0\3\12\1\0"+
    "\3\12\1\u0103\25\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\1\0\13\12\1\170\15\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\1\0\3\12\1\u010f\25\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\6\12\1\u0103"+
    "\22\12\12\0\1\56\1\0\1\57\15\0\3\12\1\0"+
    "\10\12\1\344\20\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\1\0\24\12\1\206\4\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\1\0\11\12\1\u0110\17\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\11\12\1\275"+
    "\17\12\12\0\1\56\1\0\1\57\15\0\3\12\1\0"+
    "\6\12\1\u0111\22\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\1\0\5\12\1\344\23\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\47\0\1\u010c\5\0\1\365\6\0"+
    "\1\365\1\0\1\365\1\0\11\12\1\u0112\17\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\6\12\1\u0113"+
    "\22\12\12\0\1\56\1\0\1\57\15\0\3\12\1\0"+
    "\15\12\1\u0114\13\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\1\0\7\12\1\u0115\21\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\1\0\3\12\1\173\25\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\17\12\1\u0103"+
    "\11\12\12\0\1\56\1\0\1\57\15\0\3\12\1\0"+
    "\27\12\1\u0116\1\12\12\0\1\56\1\0\1\57\15\0"+
    "\3\12\1\0\20\12\1\206\10\12\12\0\1\56\1\0"+
    "\1\57\15\0\3\12\1\0\6\12\1\u0117\22\12\12\0"+
    "\1\56\1\0\1\57\15\0\3\12\1\0\17\12\1\206"+
    "\11\12\12\0\1\56\1\0\1\57\15\0\3\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13585];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\22\1\1\11\3\1\5\11\1\1\2\11"+
    "\4\1\1\11\2\1\1\11\5\1\2\0\46\1\2\0"+
    "\2\11\5\0\1\11\3\0\1\11\1\0\2\1\1\11"+
    "\5\1\1\0\54\1\1\11\16\0\1\11\1\0\30\1"+
    "\1\0\13\1\11\0\1\1\1\0\16\1\1\0\11\1"+
    "\1\0\1\11\1\1\1\0\6\1\1\0\11\1\1\11"+
    "\5\1\1\11\1\0\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[279];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

private void imprimir(String descricao, String lexema) {
    System.out.println(lexema + " - " + descricao);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Caractere inválido " + yytext());
            }
          case 37: break;
          case 2: 
            { imprimir("Identificador", yytext());
            }
          case 38: break;
          case 3: 
            { imprimir("Espaço em branco", yytext());
            }
          case 39: break;
          case 4: 
            { imprimir("Operador de ponto", yytext());
            }
          case 40: break;
          case 5: 
            { imprimir("Ponto e vírgula", yytext());
            }
          case 41: break;
          case 6: 
            { imprimir("Parêntese aberto", yytext());
            }
          case 42: break;
          case 7: 
            { imprimir("Parêntese fechado", yytext());
            }
          case 43: break;
          case 8: 
            { imprimir("Colchete aberto", yytext());
            }
          case 44: break;
          case 9: 
            { imprimir("Colchete fechado", yytext());
            }
          case 45: break;
          case 10: 
            { imprimir("Chave aberta", yytext());
            }
          case 46: break;
          case 11: 
            { imprimir("Chave fechada", yytext());
            }
          case 47: break;
          case 12: 
            { imprimir("Operador de atribuição", yytext());
            }
          case 48: break;
          case 13: 
            { imprimir("Operador aritmético", yytext());
            }
          case 49: break;
          case 14: 
            { imprimir("Comentário", yytext());
            }
          case 50: break;
          case 15: 
            { imprimir("Operador lógico", yytext());
            }
          case 51: break;
          case 16: 
            { imprimir("Constante tipo número inteiro", yytext());
            }
          case 52: break;
          case 17: 
            { imprimir("Palavra reservada " + yytext() + " (desvio condicional)", yytext());
            }
          case 53: break;
          case 18: 
            { imprimir("Palavra reservada " + yytext() + " (loop)", yytext());
            }
          case 54: break;
          case 19: 
            { imprimir("Constante tipo string", yytext());
            }
          case 55: break;
          case 20: 
            { imprimir("Constante tipo float", yytext());
            }
          case 56: break;
          case 21: 
            { imprimir("Constante de uma matriz", yytext());
            }
          case 57: break;
          case 22: 
            { imprimir("Operador unário", yytext());
            }
          case 58: break;
          case 23: 
            { imprimir("Operador de bits", yytext());
            }
          case 59: break;
          case 24: 
            { imprimir("Método", yytext());
            }
          case 60: break;
          case 25: 
            { imprimir("Palavra reservada " + yytext() + " (exceção)", yytext());
            }
          case 61: break;
          case 26: 
            { imprimir("Palavra reservada " + yytext(), yytext());
            }
          case 62: break;
          case 27: 
            { imprimir("Palavra reservada " + yytext() + " (tipo)", yytext());
            }
          case 63: break;
          case 28: 
            { imprimir("Constante tipo char", yytext());
            }
          case 64: break;
          case 29: 
            { imprimir("Constante de um array", yytext());
            }
          case 65: break;
          case 30: 
            { imprimir("Posição do array", yytext());
            }
          case 66: break;
          case 31: 
            { imprimir("Palavra reservada " + yytext() + " (valor literal)", yytext());
            }
          case 67: break;
          case 32: 
            { imprimir("Declaração de array", yytext());
            }
          case 68: break;
          case 33: 
            { imprimir("Palavra reservada " + yytext() + " (modificador de acesso)", yytext());
            }
          case 69: break;
          case 34: 
            { imprimir("Tipo não primitivo " + yytext(), yytext());
            }
          case 70: break;
          case 35: 
            { imprimir("Posição da matriz", yytext());
            }
          case 71: break;
          case 36: 
            { imprimir("Declaração de matriz", yytext());
            }
          case 72: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
