// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: language.lex

package analisadorLexico;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class LexicalAnalyzer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\2\22\0\1\1\1\4"+
    "\1\5\2\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\11\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\22\32\1\33"+
    "\7\32\1\34\1\0\1\35\1\36\1\32\1\0\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\32\1\50\1\51\1\52\1\53\1\54\1\55\1\32"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\6\0\1\3\32\0"+
    "\1\1\u01df\0\1\1\177\0\13\1\35\0\2\3\5\0"+
    "\1\1\57\0\1\1\240\0\1\1\377\0\u0100\73";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\1\6\1\7\1\4\1\10\1\4\1\11\1\12\2\13"+
    "\1\14\1\15\1\16\1\17\1\16\1\20\1\21\2\22"+
    "\1\23\1\24\1\5\20\22\1\25\1\2\1\26\1\27"+
    "\1\16\1\0\1\30\1\17\1\3\1\0\2\31\2\12"+
    "\1\0\2\32\1\0\1\33\1\0\13\22\1\34\10\22"+
    "\1\35\23\22\12\0\1\36\2\2\1\37\1\0\1\12"+
    "\2\0\22\22\1\34\1\22\1\0\1\40\3\22\1\41"+
    "\2\22\1\42\20\22\1\43\3\22\4\0\1\44\17\0"+
    "\1\45\5\22\1\41\1\35\10\22\1\0\1\46\3\22"+
    "\1\0\1\22\1\0\3\22\1\47\16\22\12\0\1\12"+
    "\2\0\3\22\1\43\3\22\1\42\2\22\5\0\1\50"+
    "\13\22\1\43\2\22\7\0\1\51\1\22\1\0\1\52"+
    "\6\22\2\0\1\45\2\0\3\22\1\53\4\22\1\0"+
    "\1\54\2\22\4\0\1\55\13\22\1\42\3\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\74\0\74\0\u01e0\0\74\0\u021c\0\u0258\0\u0294\0\u02d0"+
    "\0\u030c\0\74\0\74\0\u0348\0\264\0\u0384\0\74\0\u03c0"+
    "\0\u03fc\0\u0438\0\74\0\74\0\u012c\0\u0474\0\u04b0\0\u04ec"+
    "\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc"+
    "\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\74"+
    "\0\74\0\74\0\360\0\74\0\74\0\74\0\u08ac\0\74"+
    "\0\u08e8\0\u0924\0\u0960\0\u0258\0\u012c\0\u099c\0\u09d8\0\74"+
    "\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8"+
    "\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98"+
    "\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78"+
    "\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158"+
    "\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338"+
    "\0\u1374\0\u0834\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc"+
    "\0\u1518\0\u1554\0\u1590\0\74\0\u15cc\0\u1608\0\74\0\u1644"+
    "\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824"+
    "\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04"+
    "\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4"+
    "\0\74\0\u0f00\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u03fc"+
    "\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0"+
    "\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0"+
    "\0\u03fc\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274"+
    "\0\74\0\u22b0\0\u22ec\0\u2328\0\u2364\0\u23a0\0\u23dc\0\u2418"+
    "\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580\0\u25bc\0\u25f8"+
    "\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u279c\0\u03fc"+
    "\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904\0\u2940\0\u297c"+
    "\0\u29b8\0\74\0\u1b6c\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4"+
    "\0\u2b20\0\u2b5c\0\u2b98\0\u03fc\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88"+
    "\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u2df0\0\u2e2c\0\u2e68"+
    "\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048"+
    "\0\u3084\0\u30c0\0\u30fc\0\u3138\0\74\0\u2634\0\u3174\0\u31b0"+
    "\0\u31ec\0\u3228\0\u3264\0\u32a0\0\u32dc\0\u3318\0\u3354\0\u3390"+
    "\0\u33cc\0\u3408\0\u3444\0\u3480\0\u34bc\0\u34f8\0\u3534\0\u3570"+
    "\0\u35ac\0\u35e8\0\u3624\0\u3660\0\u369c\0\u36d8\0\u3714\0\u3750"+
    "\0\u378c\0\u37c8\0\u3804\0\u3840\0\u387c\0\u38b8\0\u38f4\0\u3930"+
    "\0\u396c\0\u39a8\0\u39e4\0\u3a20\0\u03fc\0\u3a5c\0\u3a98\0\74"+
    "\0\u3264\0\u3ad4\0\u3b10\0\u3b4c\0\u3b88\0\u3bc4\0\u3c00\0\u3c3c"+
    "\0\u3c78\0\u3534\0\u3cb4\0\u3cf0\0\u3d2c\0\u3d68\0\u03fc\0\u3da4"+
    "\0\u3de0\0\u3e1c\0\u3e58\0\u3e94\0\74\0\u3ed0\0\u3f0c\0\u3f48"+
    "\0\u3f84\0\u3c78\0\u3fc0\0\74\0\u3ffc\0\u4038\0\u4074\0\u40b0"+
    "\0\u40ec\0\u4128\0\u4164\0\u41a0\0\u41dc\0\u4218\0\u4254\0\u2aa8"+
    "\0\u4290\0\u42cc\0\u4308";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\6\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\31\1\45\1\31\1\46"+
    "\1\31\1\47\1\31\1\50\1\51\1\52\1\53\1\31"+
    "\1\54\1\55\3\31\1\56\1\57\1\60\1\61\76\0"+
    "\3\3\64\0\1\3\31\0\1\62\45\0\5\63\1\64"+
    "\66\63\26\0\1\65\54\0\1\66\16\0\1\65\45\0"+
    "\3\67\1\0\67\67\15\0\1\61\11\0\1\65\63\0"+
    "\1\61\2\0\1\20\1\21\3\0\1\65\66\0\1\70"+
    "\1\71\51\0\2\72\2\0\7\72\1\73\57\72\20\0"+
    "\1\74\73\0\1\74\1\0\2\21\76\0\1\75\1\62"+
    "\73\0\1\62\1\76\44\0\2\30\2\0\67\30\2\0"+
    "\3\77\5\0\1\100\7\0\2\31\7\0\2\31\1\101"+
    "\2\0\30\31\1\0\1\31\4\0\3\77\5\0\1\100"+
    "\7\0\2\31\7\0\2\31\1\101\2\0\21\31\1\102"+
    "\6\31\1\0\1\31\4\0\3\77\5\0\1\100\7\0"+
    "\2\31\7\0\2\31\1\101\2\0\1\31\1\103\16\31"+
    "\1\104\7\31\1\0\1\31\4\0\3\77\5\0\1\100"+
    "\7\0\2\31\7\0\2\31\1\101\2\0\15\31\1\105"+
    "\1\31\1\106\6\31\1\107\1\31\1\0\1\31\4\0"+
    "\3\77\5\0\1\100\7\0\2\31\7\0\2\31\1\101"+
    "\2\0\1\110\6\31\1\111\2\31\1\112\2\31\1\113"+
    "\12\31\1\0\1\31\4\0\3\77\5\0\1\100\7\0"+
    "\2\31\7\0\2\31\1\101\2\0\4\31\1\114\10\31"+
    "\1\115\12\31\1\0\1\31\4\0\3\77\5\0\1\100"+
    "\7\0\2\31\7\0\2\31\1\101\2\0\12\31\1\116"+
    "\1\31\1\117\10\31\1\120\2\31\1\0\1\31\4\0"+
    "\3\77\5\0\1\100\7\0\2\31\7\0\2\31\1\101"+
    "\2\0\1\121\7\31\1\122\1\31\1\123\2\31\1\124"+
    "\12\31\1\0\1\31\4\0\3\77\5\0\1\100\7\0"+
    "\2\31\7\0\2\31\1\101\2\0\15\31\1\125\12\31"+
    "\1\0\1\31\4\0\3\77\5\0\1\100\7\0\2\31"+
    "\7\0\2\31\1\101\2\0\5\31\1\126\5\31\1\127"+
    "\1\130\13\31\1\0\1\31\4\0\3\77\5\0\1\100"+
    "\7\0\2\31\7\0\2\31\1\101\2\0\15\31\1\131"+
    "\12\31\1\0\1\31\4\0\3\77\5\0\1\100\7\0"+
    "\2\31\7\0\2\31\1\101\2\0\1\132\3\31\1\133"+
    "\15\31\1\134\5\31\1\0\1\31\4\0\3\77\5\0"+
    "\1\100\7\0\2\31\7\0\2\31\1\101\2\0\1\135"+
    "\16\31\1\136\2\31\1\137\5\31\1\0\1\31\4\0"+
    "\3\77\5\0\1\100\7\0\2\31\7\0\2\31\1\101"+
    "\2\0\4\31\1\140\23\31\1\0\1\31\4\0\3\77"+
    "\5\0\1\100\7\0\2\31\7\0\2\31\1\101\2\0"+
    "\7\31\1\141\11\31\1\142\1\143\1\31\1\144\1\31"+
    "\1\145\1\31\1\0\1\31\4\0\3\77\5\0\1\100"+
    "\7\0\2\31\7\0\2\31\1\101\2\0\7\31\1\146"+
    "\7\31\1\147\10\31\1\0\1\31\4\0\3\77\5\0"+
    "\1\100\7\0\2\31\7\0\2\31\1\101\2\0\15\31"+
    "\1\150\12\31\1\0\1\31\4\0\3\77\5\0\1\100"+
    "\7\0\2\31\7\0\2\31\1\101\2\0\7\31\1\151"+
    "\20\31\1\0\1\31\4\0\3\152\1\0\1\153\2\0"+
    "\1\154\5\0\1\155\1\156\1\0\1\157\1\160\7\0"+
    "\2\161\3\0\30\161\1\162\1\163\1\164\3\0\3\165"+
    "\5\0\1\100\7\0\2\31\3\0\1\65\3\0\2\31"+
    "\1\101\2\0\30\31\1\0\1\166\13\0\1\167\104\0"+
    "\2\71\51\0\2\72\2\0\67\72\1\0\2\73\2\170"+
    "\7\73\1\171\57\73\1\170\26\0\1\65\1\75\45\0"+
    "\3\77\5\0\1\100\22\0\1\101\33\0\1\77\4\0"+
    "\3\101\15\0\1\172\1\173\45\0\1\101\4\0\3\77"+
    "\5\0\1\100\7\0\2\31\7\0\2\31\1\101\2\0"+
    "\17\31\1\174\10\31\1\0\1\31\4\0\3\77\5\0"+
    "\1\100\7\0\2\31\7\0\2\31\1\101\2\0\20\31"+
    "\1\175\7\31\1\0\1\31\4\0\3\77\5\0\1\100"+
    "\7\0\2\31\7\0\2\31\1\101\2\0\20\31\1\176"+
    "\7\31\1\0\1\31\4\0\3\77\5\0\1\100\7\0"+
    "\2\31\7\0\2\31\1\101\2\0\15\31\1\177\12\31"+
    "\1\0\1\31\4\0\3\77\5\0\1\100\7\0\2\31"+
    "\7\0\2\31\1\101\2\0\4\31\1\200\23\31\1\0"+
    "\1\31\4\0\3\77\5\0\1\100\7\0\2\31\7\0"+
    "\2\31\1\101\2\0\21\31\1\201\6\31\1\0\1\31"+
    "\4\0\3\77\5\0\1\100\7\0\2\31\7\0\2\31"+
    "\1\101\2\0\20\31\1\202\1\203\6\31\1\0\1\31"+
    "\4\0\3\77\5\0\1\100\7\0\2\31\7\0\2\31"+
    "\1\101\2\0\1\204\27\31\1\0\1\31\4\0\3\77"+
    "\5\0\1\100\7\0\2\31\7\0\2\31\1\101\2\0"+
    "\1\205\27\31\1\0\1\31\4\0\3\77\5\0\1\100"+
    "\7\0\2\31\7\0\2\31\1\101\2\0\14\31\1\206"+
    "\13\31\1\0\1\31\4\0\3\77\5\0\1\100\7\0"+
    "\2\31\7\0\2\31\1\101\2\0\5\31\1\207\22\31"+
    "\1\0\1\31\4\0\3\77\5\0\1\100\7\0\2\31"+
    "\7\0\2\31\1\101\2\0\22\31\1\210\5\31\1\0"+
    "\1\31\4\0\3\77\5\0\1\100\7\0\2\31\7\0"+
    "\2\31\1\101\2\0\20\31\1\202\7\31\1\0\1\31"+
    "\4\0\3\77\5\0\1\100\7\0\2\31\7\0\2\31"+
    "\1\101\2\0\22\31\1\211\5\31\1\0\1\31\4\0"+
    "\3\77\5\0\1\100\7\0\2\31\7\0\2\31\1\101"+
    "\2\0\21\31\1\212\6\31\1\0\1\31\4\0\3\77"+
    "\5\0\1\100\7\0\2\31\7\0\2\31\1\101\2\0"+
    "\12\31\1\213\15\31\1\0\1\31\4\0\3\77\5\0"+
    "\1\100\7\0\2\31\7\0\2\31\1\101\2\0\14\31"+
    "\1\214\13\31\1\0\1\31\4\0\3\77\5\0\1\100"+
    "\7\0\2\31\7\0\2\31\1\101\2\0\15\31\1\215"+
    "\12\31\1\0\1\31\4\0\3\77\5\0\1\100\7\0"+
    "\2\31\7\0\2\31\1\101\2\0\17\31\1\216\10\31"+
    "\1\0\1\31\4\0\3\77\5\0\1\100\7\0\2\31"+
    "\7\0\2\31\1\101\2\0\21\31\1\217\6\31\1\0"+
    "\1\31\4\0\3\220\5\0\1\221\7\0\2\31\7\0"+
    "\2\31\1\101\2\0\30\31\1\0\1\222\4\0\3\77"+
    "\5\0\1\100\7\0\2\31\7\0\2\31\1\101\2\0"+
    "\16\31\1\223\11\31\1\0\1\31\4\0\3\77\5\0"+
    "\1\100\7\0\2\31\7\0\2\31\1\101\2\0\20\31"+
    "\1\224\1\225\6\31\1\0\1\31\4\0\3\77\5\0"+
    "\1\100\7\0\2\31\7\0\2\31\1\101\2\0\14\31"+
    "\1\226\13\31\1\0\1\31\4\0\3\77\5\0\1\100"+
    "\7\0\2\31\7\0\2\31\1\101\2\0\21\31\1\227"+
    "\6\31\1\0\1\31\4\0\3\77\5\0\1\100\7\0"+
    "\2\31\7\0\2\31\1\101\2\0\24\31\1\230\3\31"+
    "\1\0\1\31\4\0\3\77\5\0\1\100\7\0\2\31"+
    "\7\0\2\31\1\101\2\0\12\31\1\231\15\31\1\0"+
    "\1\31\4\0\3\77\5\0\1\100\7\0\2\31\7\0"+
    "\2\31\1\101\2\0\2\31\1\232\25\31\1\0\1\31"+
    "\4\0\3\77\5\0\1\100\7\0\2\31\7\0\2\31"+
    "\1\101\2\0\10\31\1\233\4\31\1\234\12\31\1\0"+
    "\1\31\4\0\3\77\5\0\1\100\7\0\2\31\7\0"+
    "\2\31\1\101\2\0\1\31\1\235\26\31\1\0\1\31"+
    "\4\0\3\77\5\0\1\100\7\0\2\31\7\0\2\31"+
    "\1\101\2\0\21\31\1\236\6\31\1\0\1\31\4\0"+
    "\3\77\5\0\1\100\7\0\2\31\7\0\2\31\1\101"+
    "\2\0\15\31\1\237\12\31\1\0\1\31\4\0\3\77"+
    "\5\0\1\100\7\0\2\31\7\0\2\31\1\101\2\0"+
    "\1\240\16\31\1\241\10\31\1\0\1\31\4\0\3\77"+
    "\5\0\1\100\7\0\2\31\7\0\2\31\1\101\2\0"+
    "\16\31\1\242\11\31\1\0\1\31\4\0\3\77\5\0"+
    "\1\100\7\0\2\31\7\0\2\31\1\101\2\0\10\31"+
    "\1\243\17\31\1\0\1\31\4\0\3\77\5\0\1\100"+
    "\7\0\2\31\7\0\2\31\1\101\2\0\14\31\1\244"+
    "\13\31\1\0\1\31\4\0\3\77\5\0\1\100\7\0"+
    "\2\31\7\0\2\31\1\101\2\0\10\31\1\245\6\31"+
    "\1\246\10\31\1\0\1\31\4\0\3\77\5\0\1\100"+
    "\7\0\2\31\7\0\2\31\1\101\2\0\1\247\21\31"+
    "\1\250\3\31\1\251\1\31\1\0\1\31\4\0\3\77"+
    "\5\0\1\100\7\0\2\31\7\0\2\31\1\101\2\0"+
    "\10\31\1\252\1\31\1\253\15\31\1\0\1\31\4\0"+
    "\3\77\5\0\1\100\7\0\2\31\7\0\2\31\1\101"+
    "\2\0\10\31\1\254\17\31\1\0\1\31\3\0\5\153"+
    "\1\255\66\153\3\256\1\0\67\256\22\0\1\157\1\160"+
    "\72\0\1\255\1\257\52\0\3\255\11\0\1\260\1\0"+
    "\1\156\50\0\1\255\1\261\3\0\3\255\11\0\1\260"+
    "\1\0\1\156\1\0\2\160\45\0\1\255\1\261\3\0"+
    "\3\262\11\0\1\263\3\0\2\161\7\0\2\161\3\0"+
    "\30\161\1\0\1\161\1\164\3\0\3\162\1\0\1\264"+
    "\2\0\1\265\5\0\1\266\1\267\1\0\1\270\1\271"+
    "\7\0\2\272\3\0\30\272\1\0\1\273\1\274\3\0"+
    "\3\275\1\0\1\153\2\0\1\154\4\0\1\263\1\155"+
    "\1\156\1\0\1\276\1\277\7\0\2\161\3\0\30\161"+
    "\1\162\1\163\1\164\3\0\3\165\5\0\1\100\22\0"+
    "\1\101\33\0\1\165\4\0\3\165\5\0\1\100\7\0"+
    "\2\31\7\0\2\31\1\101\2\0\30\31\1\0\1\166"+
    "\3\0\13\170\1\300\60\170\2\73\2\170\7\73\1\171"+
    "\4\73\1\72\52\73\1\170\1\0\3\172\31\0\1\301"+
    "\32\0\1\172\4\0\3\172\15\0\2\173\12\0\1\301"+
    "\32\0\1\172\4\0\3\77\5\0\1\100\7\0\2\31"+
    "\7\0\2\31\1\101\2\0\10\31\1\302\17\31\1\0"+
    "\1\31\4\0\3\77\5\0\1\100\7\0\2\31\7\0"+
    "\2\31\1\101\2\0\21\31\1\303\6\31\1\0\1\31"+
    "\4\0\3\77\5\0\1\100\7\0\2\31\7\0\2\31"+
    "\1\101\2\0\4\31\1\304\23\31\1\0\1\31\4\0"+
    "\3\77\5\0\1\100\7\0\2\31\7\0\2\31\1\101"+
    "\2\0\12\31\1\305\15\31\1\0\1\31\4\0\3\77"+
    "\5\0\1\100\7\0\2\31\7\0\2\31\1\101\2\0"+
    "\1\306\27\31\1\0\1\31\4\0\3\77\5\0\1\100"+
    "\7\0\2\31\7\0\2\31\1\101\2\0\4\31\1\307"+
    "\23\31\1\0\1\31\4\0\3\77\5\0\1\100\7\0"+
    "\2\31\7\0\2\31\1\101\2\0\4\31\1\310\23\31"+
    "\1\0\1\31\4\0\3\77\5\0\1\100\7\0\2\31"+
    "\7\0\2\31\1\101\2\0\2\31\1\311\25\31\1\0"+
    "\1\31\4\0\3\77\5\0\1\100\7\0\2\31\7\0"+
    "\2\31\1\101\2\0\17\31\1\307\10\31\1\0\1\31"+
    "\4\0\3\77\5\0\1\100\7\0\2\31\7\0\2\31"+
    "\1\101\2\0\20\31\1\245\7\31\1\0\1\31\4\0"+
    "\3\77\5\0\1\100\7\0\2\31\7\0\2\31\1\101"+
    "\2\0\20\31\1\312\1\313\6\31\1\0\1\31\4\0"+
    "\3\77\5\0\1\100\7\0\2\31\7\0\2\31\1\101"+
    "\2\0\1\314\27\31\1\0\1\31\4\0\3\77\5\0"+
    "\1\100\7\0\2\31\7\0\2\31\1\101\2\0\1\31"+
    "\1\315\26\31\1\0\1\31\4\0\3\77\5\0\1\100"+
    "\7\0\2\31\7\0\2\31\1\101\2\0\13\31\1\230"+
    "\14\31\1\0\1\31\4\0\3\77\5\0\1\100\7\0"+
    "\2\31\7\0\2\31\1\101\2\0\4\31\1\316\23\31"+
    "\1\0\1\31\4\0\3\77\5\0\1\100\7\0\2\31"+
    "\7\0\2\31\1\101\2\0\20\31\1\250\7\31\1\0"+
    "\1\31\4\0\3\77\5\0\1\100\7\0\2\31\7\0"+
    "\2\31\1\101\2\0\1\317\27\31\1\0\1\31\4\0"+
    "\3\77\5\0\1\100\7\0\2\31\7\0\2\31\1\101"+
    "\2\0\1\320\27\31\1\0\1\31\4\0\3\321\5\0"+
    "\1\322\7\0\2\31\7\0\2\31\1\101\2\0\30\31"+
    "\1\0\1\323\4\0\3\77\5\0\1\100\7\0\2\31"+
    "\7\0\2\31\1\101\2\0\15\31\1\230\12\31\1\0"+
    "\1\31\4\0\3\220\5\0\1\221\22\0\1\101\33\0"+
    "\1\220\4\0\3\77\5\0\1\100\7\0\2\31\7\0"+
    "\2\31\1\101\2\0\12\31\1\324\2\31\1\304\12\31"+
    "\1\0\1\31\4\0\3\77\5\0\1\100\7\0\2\31"+
    "\7\0\2\31\1\101\2\0\21\31\1\325\6\31\1\0"+
    "\1\31\4\0\3\326\5\0\1\100\7\0\2\31\7\0"+
    "\2\327\1\330\2\0\4\327\1\331\23\327\1\0\1\332"+
    "\4\0\3\77\5\0\1\100\7\0\2\31\7\0\2\31"+
    "\1\101\2\0\6\31\1\307\21\31\1\0\1\31\4\0"+
    "\3\77\5\0\1\100\7\0\2\31\7\0\2\31\1\101"+
    "\2\0\10\31\1\333\17\31\1\0\1\31\4\0\3\77"+
    "\5\0\1\100\7\0\2\31\7\0\2\31\1\101\2\0"+
    "\12\31\1\334\15\31\1\0\1\31\4\0\3\77\5\0"+
    "\1\100\7\0\2\31\7\0\2\31\1\101\2\0\11\31"+
    "\1\335\16\31\1\0\1\31\4\0\3\77\5\0\1\100"+
    "\7\0\2\31\7\0\2\31\1\101\2\0\23\31\1\336"+
    "\4\31\1\0\1\31\4\0\3\77\5\0\1\100\7\0"+
    "\2\31\7\0\2\31\1\101\2\0\21\31\1\337\6\31"+
    "\1\0\1\31\4\0\3\77\5\0\1\100\7\0\2\31"+
    "\7\0\2\31\1\101\2\0\12\31\1\340\15\31\1\0"+
    "\1\31\4\0\3\77\5\0\1\100\7\0\2\31\7\0"+
    "\2\31\1\101\2\0\22\31\1\341\5\31\1\0\1\31"+
    "\4\0\3\77\5\0\1\100\7\0\2\31\7\0\2\31"+
    "\1\101\2\0\17\31\1\320\10\31\1\0\1\31\4\0"+
    "\3\77\5\0\1\100\7\0\2\31\7\0\2\31\1\101"+
    "\2\0\21\31\1\342\6\31\1\0\1\31\4\0\3\77"+
    "\5\0\1\100\7\0\2\31\7\0\2\31\1\101\2\0"+
    "\10\31\1\343\17\31\1\0\1\31\4\0\3\77\5\0"+
    "\1\100\7\0\2\31\7\0\2\31\1\101\2\0\4\31"+
    "\1\344\23\31\1\0\1\31\4\0\3\77\5\0\1\100"+
    "\7\0\2\31\7\0\2\31\1\101\2\0\21\31\1\345"+
    "\6\31\1\0\1\31\4\0\3\77\5\0\1\100\7\0"+
    "\2\31\7\0\2\31\1\101\2\0\2\31\1\346\25\31"+
    "\1\0\1\31\4\0\3\77\5\0\1\100\7\0\2\31"+
    "\7\0\2\31\1\101\2\0\20\31\1\230\7\31\1\0"+
    "\1\31\4\0\3\77\5\0\1\100\7\0\2\31\7\0"+
    "\2\31\1\101\2\0\15\31\1\347\12\31\1\0\1\31"+
    "\4\0\3\77\5\0\1\100\7\0\2\31\7\0\2\31"+
    "\1\101\2\0\14\31\1\350\13\31\1\0\1\31\4\0"+
    "\3\77\5\0\1\100\7\0\2\31\7\0\2\31\1\101"+
    "\2\0\4\31\1\334\23\31\1\0\1\31\4\0\3\77"+
    "\5\0\1\100\7\0\2\31\7\0\2\31\1\101\2\0"+
    "\3\31\1\307\24\31\1\0\1\31\4\0\3\77\5\0"+
    "\1\100\7\0\2\31\7\0\2\31\1\101\2\0\1\351"+
    "\27\31\1\0\1\31\4\0\3\77\5\0\1\100\7\0"+
    "\2\31\7\0\2\31\1\101\2\0\12\31\1\352\15\31"+
    "\1\0\1\31\4\0\3\255\11\0\1\260\52\0\1\255"+
    "\1\261\12\0\1\255\64\0\3\255\11\0\1\260\3\0"+
    "\2\257\45\0\1\255\1\261\3\0\3\260\1\0\1\153"+
    "\2\0\1\154\5\0\1\155\1\156\1\0\1\157\1\160"+
    "\7\0\2\353\3\0\30\353\1\0\1\354\4\0\3\262"+
    "\11\0\1\263\52\0\1\262\1\164\3\0\3\263\1\0"+
    "\1\153\2\0\1\154\5\0\1\155\1\156\1\0\1\157"+
    "\1\160\7\0\2\161\3\0\30\161\1\162\1\163\3\0"+
    "\5\264\1\355\66\264\3\356\1\0\67\356\22\0\1\270"+
    "\1\271\72\0\1\355\1\357\52\0\3\355\11\0\1\360"+
    "\1\0\1\267\50\0\1\355\1\274\3\0\3\355\11\0"+
    "\1\360\1\0\1\267\1\0\2\271\45\0\1\355\1\274"+
    "\3\0\3\355\11\0\1\360\3\0\2\272\7\0\2\272"+
    "\3\0\30\272\1\0\1\272\1\274\3\0\3\361\1\0"+
    "\1\264\2\0\1\265\4\0\1\360\1\266\1\267\1\0"+
    "\1\362\1\363\7\0\2\272\3\0\30\272\1\0\1\273"+
    "\1\274\3\0\3\274\11\0\1\364\52\0\1\274\1\164"+
    "\3\0\3\275\1\0\1\153\2\0\1\154\4\0\1\263"+
    "\1\155\1\156\1\0\1\157\1\160\7\0\2\161\3\0"+
    "\30\161\1\162\1\163\1\164\3\0\3\262\11\0\1\263"+
    "\1\0\1\156\1\0\2\161\7\0\2\161\3\0\30\161"+
    "\1\0\1\161\1\164\3\0\3\262\11\0\1\263\1\0"+
    "\1\156\1\0\2\277\7\0\2\161\3\0\30\161\1\0"+
    "\1\161\1\164\2\0\13\170\1\300\4\170\1\365\53\170"+
    "\1\0\3\366\30\0\1\367\33\0\1\366\4\0\3\77"+
    "\5\0\1\100\7\0\2\31\7\0\2\31\1\101\2\0"+
    "\14\31\1\370\13\31\1\0\1\31\4\0\3\77\5\0"+
    "\1\100\7\0\2\31\7\0\2\31\1\101\2\0\17\31"+
    "\1\371\10\31\1\0\1\31\4\0\3\77\5\0\1\100"+
    "\7\0\2\31\7\0\2\31\1\101\2\0\17\31\1\312"+
    "\10\31\1\0\1\31\4\0\3\77\5\0\1\100\7\0"+
    "\2\31\7\0\2\31\1\101\2\0\4\31\1\372\23\31"+
    "\1\0\1\31\4\0\3\77\5\0\1\100\7\0\2\31"+
    "\7\0\2\31\1\101\2\0\11\31\1\230\16\31\1\0"+
    "\1\31\4\0\3\326\5\0\1\100\7\0\2\31\7\0"+
    "\2\327\1\330\2\0\30\327\1\0\1\332\4\0\3\77"+
    "\5\0\1\100\7\0\2\31\7\0\2\31\1\101\2\0"+
    "\7\31\1\373\20\31\1\0\1\31\4\0\3\77\5\0"+
    "\1\100\7\0\2\31\7\0\2\31\1\101\2\0\21\31"+
    "\1\230\6\31\1\0\1\31\4\0\3\77\5\0\1\100"+
    "\7\0\2\31\7\0\2\31\1\101\2\0\10\31\1\374"+
    "\17\31\1\0\1\31\4\0\3\77\5\0\1\100\7\0"+
    "\2\31\7\0\2\31\1\101\2\0\22\31\1\375\5\31"+
    "\1\0\1\31\4\0\3\77\5\0\1\100\7\0\2\31"+
    "\7\0\2\31\1\101\2\0\12\31\1\201\15\31\1\0"+
    "\1\31\4\0\3\77\5\0\1\100\7\0\2\31\7\0"+
    "\2\31\1\101\2\0\14\31\1\376\13\31\1\0\1\31"+
    "\4\0\3\77\5\0\1\100\7\0\2\31\7\0\2\31"+
    "\1\101\2\0\12\31\1\377\15\31\1\0\1\31\4\0"+
    "\3\77\5\0\1\100\7\0\2\31\7\0\2\31\1\101"+
    "\2\0\21\31\1\307\6\31\1\0\1\31\4\0\3\321"+
    "\5\0\1\322\22\0\1\101\33\0\1\321\4\0\3\77"+
    "\5\0\1\100\7\0\2\31\7\0\2\31\1\101\2\0"+
    "\4\31\1\u0100\23\31\1\0\1\31\4\0\3\77\5\0"+
    "\1\100\7\0\2\31\7\0\2\31\1\101\2\0\1\u0101"+
    "\27\31\1\0\1\31\4\0\3\326\5\0\1\100\20\0"+
    "\2\u0102\1\330\2\0\30\u0102\1\0\1\u0103\4\0\3\u0104"+
    "\5\0\1\100\7\0\2\327\7\0\2\327\1\330\2\0"+
    "\30\327\1\0\1\327\4\0\3\330\15\0\1\u0105\1\u0106"+
    "\12\0\1\u0107\32\0\1\330\4\0\3\u0104\5\0\1\100"+
    "\7\0\2\327\7\0\2\327\1\330\2\0\17\327\1\u0108"+
    "\10\327\1\0\1\327\4\0\3\326\5\0\1\100\7\0"+
    "\2\327\7\0\2\327\1\330\2\0\30\327\1\0\1\332"+
    "\4\0\3\77\5\0\1\100\7\0\2\31\7\0\2\31"+
    "\1\101\2\0\23\31\1\u0109\4\31\1\0\1\31\4\0"+
    "\3\77\5\0\1\100\7\0\2\31\7\0\2\31\1\101"+
    "\2\0\1\u010a\27\31\1\0\1\31\4\0\3\77\5\0"+
    "\1\100\7\0\2\31\7\0\2\31\1\101\2\0\1\u010b"+
    "\27\31\1\0\1\31\4\0\3\77\5\0\1\100\7\0"+
    "\2\31\7\0\2\31\1\101\2\0\4\31\1\u010c\23\31"+
    "\1\0\1\31\4\0\3\77\5\0\1\100\7\0\2\31"+
    "\7\0\2\31\1\101\2\0\10\31\1\u010d\17\31\1\0"+
    "\1\31\4\0\3\77\5\0\1\100\7\0\2\31\7\0"+
    "\2\31\1\101\2\0\17\31\1\u010e\10\31\1\0\1\31"+
    "\4\0\3\77\5\0\1\100\7\0\2\31\7\0\2\31"+
    "\1\101\2\0\10\31\1\u010f\17\31\1\0\1\31\4\0"+
    "\3\77\5\0\1\100\7\0\2\31\7\0\2\31\1\101"+
    "\2\0\2\31\1\u0110\25\31\1\0\1\31\4\0\3\77"+
    "\5\0\1\100\7\0\2\31\7\0\2\31\1\101\2\0"+
    "\17\31\1\230\10\31\1\0\1\31\4\0\3\77\5\0"+
    "\1\100\7\0\2\31\7\0\2\31\1\101\2\0\2\31"+
    "\1\u0111\25\31\1\0\1\31\4\0\3\77\5\0\1\100"+
    "\7\0\2\31\7\0\2\31\1\101\2\0\7\31\1\u0112"+
    "\20\31\1\0\1\31\4\0\3\77\5\0\1\100\7\0"+
    "\2\31\7\0\2\31\1\101\2\0\24\31\1\u0113\3\31"+
    "\1\0\1\31\4\0\3\77\5\0\1\100\7\0\2\31"+
    "\7\0\2\31\1\101\2\0\20\31\1\u0114\7\31\1\0"+
    "\1\31\4\0\3\77\5\0\1\100\7\0\2\31\7\0"+
    "\2\31\1\101\2\0\21\31\1\u0115\6\31\1\0\1\31"+
    "\4\0\3\77\5\0\1\100\7\0\2\31\7\0\2\31"+
    "\1\101\2\0\4\31\1\216\23\31\1\0\1\31\4\0"+
    "\3\255\11\0\1\260\3\0\2\353\7\0\2\353\3\0"+
    "\30\353\1\0\1\353\1\261\3\0\3\u0116\1\0\1\153"+
    "\2\0\1\154\4\0\1\260\1\155\1\156\1\0\1\u0117"+
    "\1\u0118\7\0\2\353\3\0\30\353\1\0\1\354\1\261"+
    "\3\0\3\355\11\0\1\360\52\0\1\355\1\274\12\0"+
    "\1\355\64\0\3\355\11\0\1\360\3\0\2\357\45\0"+
    "\1\355\1\274\3\0\3\360\1\0\1\264\2\0\1\265"+
    "\5\0\1\266\1\267\1\0\1\270\1\271\7\0\2\272"+
    "\3\0\30\272\1\0\1\273\4\0\3\361\1\0\1\264"+
    "\2\0\1\265\4\0\1\360\1\266\1\267\1\0\1\270"+
    "\1\271\7\0\2\272\3\0\30\272\1\0\1\273\1\274"+
    "\3\0\3\355\11\0\1\360\1\0\1\267\1\0\2\272"+
    "\7\0\2\272\3\0\30\272\1\0\1\272\1\274\3\0"+
    "\3\355\11\0\1\360\1\0\1\267\1\0\2\363\7\0"+
    "\2\272\3\0\30\272\1\0\1\272\1\274\3\0\3\364"+
    "\26\0\2\u0119\3\0\30\u0119\1\162\1\u011a\4\0\3\367"+
    "\15\0\1\u011b\1\u011c\45\0\1\367\4\0\3\77\5\0"+
    "\1\100\7\0\2\31\7\0\2\31\1\101\2\0\6\31"+
    "\1\u011d\21\31\1\0\1\31\4\0\3\77\5\0\1\100"+
    "\7\0\2\31\7\0\2\31\1\101\2\0\1\u011e\27\31"+
    "\1\0\1\31\4\0\3\77\5\0\1\100\7\0\2\31"+
    "\7\0\2\31\1\101\2\0\1\u010e\27\31\1\0\1\31"+
    "\4\0\3\u011f\5\0\1\u0120\7\0\2\31\7\0\2\31"+
    "\1\101\2\0\30\31\1\0\1\u0121\4\0\3\77\5\0"+
    "\1\100\7\0\2\31\7\0\2\31\1\101\2\0\14\31"+
    "\1\u0122\13\31\1\0\1\31\4\0\3\77\5\0\1\100"+
    "\7\0\2\31\7\0\2\31\1\101\2\0\12\31\1\u0123"+
    "\15\31\1\0\1\31\4\0\3\77\5\0\1\100\7\0"+
    "\2\31\7\0\2\31\1\101\2\0\3\31\1\245\24\31"+
    "\1\0\1\31\4\0\3\77\5\0\1\100\7\0\2\31"+
    "\7\0\2\31\1\101\2\0\12\31\1\u0124\15\31\1\0"+
    "\1\31\4\0\3\77\5\0\1\100\7\0\2\31\7\0"+
    "\2\31\1\101\2\0\13\31\1\u0125\14\31\1\0\1\31"+
    "\4\0\3\77\5\0\1\100\7\0\2\31\7\0\2\31"+
    "\1\101\2\0\14\31\1\u0126\13\31\1\0\1\31\4\0"+
    "\3\u0127\15\0\2\u0102\7\0\2\u0102\1\u0128\2\0\30\u0102"+
    "\1\0\1\u0102\4\0\3\326\5\0\1\100\7\0\2\u0102"+
    "\7\0\2\u0102\1\330\2\0\30\u0102\1\0\1\u0103\4\0"+
    "\3\u0104\5\0\1\100\22\0\1\330\33\0\1\u0104\4\0"+
    "\3\u0105\31\0\1\u0129\32\0\1\u0105\4\0\3\u0105\15\0"+
    "\2\u0106\12\0\1\u0129\32\0\1\u0105\4\0\3\u012a\30\0"+
    "\1\u012b\33\0\1\u012a\4\0\3\u0104\5\0\1\100\7\0"+
    "\2\327\7\0\2\327\1\330\2\0\5\327\1\u012c\22\327"+
    "\1\0\1\327\4\0\3\77\5\0\1\100\7\0\2\31"+
    "\7\0\2\31\1\101\2\0\4\31\1\230\23\31\1\0"+
    "\1\31\4\0\3\77\5\0\1\100\7\0\2\31\7\0"+
    "\2\31\1\101\2\0\6\31\1\u0109\21\31\1\0\1\31"+
    "\4\0\3\77\5\0\1\100\7\0\2\31\7\0\2\31"+
    "\1\101\2\0\21\31\1\u012d\6\31\1\0\1\31\4\0"+
    "\3\77\5\0\1\100\7\0\2\31\7\0\2\31\1\101"+
    "\2\0\2\31\1\u012e\25\31\1\0\1\31\4\0\3\77"+
    "\5\0\1\100\7\0\2\31\7\0\2\31\1\101\2\0"+
    "\2\31\1\u012f\25\31\1\0\1\31\4\0\3\77\5\0"+
    "\1\100\7\0\2\31\7\0\2\31\1\101\2\0\14\31"+
    "\1\230\13\31\1\0\1\31\4\0\3\77\5\0\1\100"+
    "\7\0\2\31\7\0\2\31\1\101\2\0\2\31\1\230"+
    "\25\31\1\0\1\31\4\0\3\77\5\0\1\100\7\0"+
    "\2\31\7\0\2\31\1\101\2\0\21\31\1\u0130\6\31"+
    "\1\0\1\31\4\0\3\77\5\0\1\100\7\0\2\31"+
    "\7\0\2\31\1\101\2\0\7\31\1\126\20\31\1\0"+
    "\1\31\4\0\3\77\5\0\1\100\7\0\2\31\7\0"+
    "\2\31\1\101\2\0\17\31\1\u0131\10\31\1\0\1\31"+
    "\4\0\3\77\5\0\1\100\7\0\2\31\7\0\2\31"+
    "\1\101\2\0\20\31\1\251\7\31\1\0\1\31\4\0"+
    "\3\77\5\0\1\100\7\0\2\31\7\0\2\31\1\101"+
    "\2\0\10\31\1\u0132\17\31\1\0\1\31\4\0\3\77"+
    "\5\0\1\100\7\0\2\31\7\0\2\31\1\101\2\0"+
    "\10\31\1\u0133\17\31\1\0\1\31\4\0\3\u0116\1\0"+
    "\1\153\2\0\1\154\4\0\1\260\1\155\1\156\1\0"+
    "\1\157\1\160\7\0\2\353\3\0\30\353\1\0\1\354"+
    "\1\261\3\0\3\255\11\0\1\260\1\0\1\156\1\0"+
    "\2\353\7\0\2\353\3\0\30\353\1\0\1\353\1\261"+
    "\3\0\3\255\11\0\1\260\1\0\1\156\1\0\2\u0118"+
    "\7\0\2\353\3\0\30\353\1\0\1\353\1\261\3\0"+
    "\3\274\11\0\1\364\3\0\2\u0119\7\0\2\u0119\3\0"+
    "\30\u0119\1\0\1\u0119\1\164\3\0\3\u0134\11\0\1\364"+
    "\3\0\2\u0119\7\0\2\u0119\3\0\30\u0119\1\162\1\u011a"+
    "\1\164\3\0\3\u011b\31\0\1\u0135\32\0\1\u011b\4\0"+
    "\3\u011b\15\0\2\u011c\12\0\1\u0135\32\0\1\u011b\4\0"+
    "\3\77\5\0\1\100\7\0\2\31\7\0\2\31\1\101"+
    "\2\0\2\31\1\312\25\31\1\0\1\31\4\0\3\u011f"+
    "\5\0\1\u0120\22\0\1\101\33\0\1\u011f\4\0\3\77"+
    "\5\0\1\100\7\0\2\31\7\0\2\31\1\101\2\0"+
    "\22\31\1\u0109\5\31\1\0\1\31\4\0\3\77\5\0"+
    "\1\100\7\0\2\31\7\0\2\31\1\101\2\0\21\31"+
    "\1\u012f\6\31\1\0\1\31\4\0\3\77\5\0\1\100"+
    "\7\0\2\31\7\0\2\31\1\101\2\0\26\31\1\251"+
    "\1\31\1\0\1\31\4\0\3\77\5\0\1\100\7\0"+
    "\2\31\7\0\2\31\1\101\2\0\4\31\1\u0136\23\31"+
    "\1\0\1\31\4\0\3\77\5\0\1\100\7\0\2\31"+
    "\7\0\2\31\1\101\2\0\2\31\1\u0137\25\31\1\0"+
    "\1\31\4\0\3\u0127\30\0\1\u0128\33\0\1\u0127\4\0"+
    "\3\u0128\15\0\1\u0138\1\u0139\12\0\1\u0107\32\0\1\u0128"+
    "\4\0\3\u013a\30\0\1\u013b\33\0\1\u013a\4\0\3\u012b"+
    "\31\0\1\u013c\32\0\1\u012b\4\0\3\u0104\5\0\1\100"+
    "\7\0\2\327\7\0\2\327\1\330\2\0\1\u013d\27\327"+
    "\1\0\1\327\4\0\3\77\5\0\1\100\7\0\2\31"+
    "\7\0\2\31\1\101\2\0\4\31\1\u012f\23\31\1\0"+
    "\1\31\4\0\3\77\5\0\1\100\7\0\2\31\7\0"+
    "\2\31\1\101\2\0\21\31\1\u013e\6\31\1\0\1\31"+
    "\4\0\3\77\5\0\1\100\7\0\2\31\7\0\2\31"+
    "\1\101\2\0\5\31\1\u013f\22\31\1\0\1\31\4\0"+
    "\3\77\5\0\1\100\7\0\2\31\7\0\2\31\1\101"+
    "\2\0\15\31\1\u0140\12\31\1\0\1\31\4\0\3\77"+
    "\5\0\1\100\7\0\2\31\7\0\2\31\1\101\2\0"+
    "\4\31\1\u0141\23\31\1\0\1\31\4\0\3\77\5\0"+
    "\1\100\7\0\2\31\7\0\2\31\1\101\2\0\12\31"+
    "\1\u0109\15\31\1\0\1\31\4\0\3\u0134\11\0\1\364"+
    "\14\0\2\u0119\3\0\30\u0119\1\162\1\u011a\1\164\3\0"+
    "\3\77\5\0\1\100\7\0\2\31\7\0\2\31\1\101"+
    "\2\0\14\31\1\u0142\13\31\1\0\1\31\4\0\3\77"+
    "\5\0\1\100\7\0\2\31\7\0\2\31\1\101\2\0"+
    "\4\31\1\u0143\23\31\1\0\1\31\4\0\3\u0138\31\0"+
    "\1\u012a\32\0\1\u0138\4\0\3\u0138\15\0\2\u0139\12\0"+
    "\1\u012a\32\0\1\u0138\4\0\3\u013b\15\0\1\u011b\1\u011c"+
    "\12\0\1\u013c\32\0\1\u013b\4\0\3\u0104\5\0\1\100"+
    "\7\0\2\327\7\0\2\327\1\330\2\0\2\327\1\u0144"+
    "\25\327\1\0\1\327\4\0\3\77\5\0\1\100\7\0"+
    "\2\31\7\0\2\31\1\101\2\0\4\31\1\u0145\23\31"+
    "\1\0\1\31\4\0\3\77\5\0\1\100\7\0\2\31"+
    "\7\0\2\31\1\101\2\0\16\31\1\230\11\31\1\0"+
    "\1\31\4\0\3\77\5\0\1\100\7\0\2\31\7\0"+
    "\2\31\1\101\2\0\14\31\1\u0146\13\31\1\0\1\31"+
    "\4\0\3\77\5\0\1\100\7\0\2\31\7\0\2\31"+
    "\1\101\2\0\14\31\1\312\13\31\1\0\1\31\4\0"+
    "\3\77\5\0\1\100\7\0\2\31\7\0\2\31\1\101"+
    "\2\0\21\31\1\245\6\31\1\0\1\31\4\0\3\77"+
    "\5\0\1\100\7\0\2\31\7\0\2\31\1\101\2\0"+
    "\15\31\1\u0147\12\31\1\0\1\31\4\0\3\u0104\5\0"+
    "\1\100\7\0\2\327\7\0\2\327\1\330\2\0\4\327"+
    "\1\u0148\23\327\1\0\1\327\4\0\3\77\5\0\1\100"+
    "\7\0\2\31\7\0\2\31\1\101\2\0\3\31\1\u012f"+
    "\24\31\1\0\1\31\4\0\3\77\5\0\1\100\7\0"+
    "\2\31\7\0\2\31\1\101\2\0\10\31\1\u0149\17\31"+
    "\1\0\1\31\4\0\3\77\5\0\1\100\7\0\2\31"+
    "\7\0\2\31\1\101\2\0\5\31\1\230\22\31\1\0"+
    "\1\31\4\0\3\77\5\0\1\100\7\0\2\31\7\0"+
    "\2\31\1\101\2\0\27\31\1\u014a\1\0\1\31\4\0"+
    "\3\77\5\0\1\100\7\0\2\31\7\0\2\31\1\101"+
    "\2\0\4\31\1\u014b\23\31\1\0\1\31\4\0\3\77"+
    "\5\0\1\100\7\0\2\31\7\0\2\31\1\101\2\0"+
    "\3\31\1\230\24\31\1\0\1\31\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17220];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\2\11\1\1\1\11\5\1\2\11"+
    "\3\1\1\11\3\1\2\11\23\1\3\11\1\0\3\11"+
    "\1\0\1\11\3\1\1\0\2\1\1\0\1\11\1\0"+
    "\50\1\12\0\1\11\2\1\1\11\1\0\1\1\2\0"+
    "\24\1\1\0\1\11\33\1\4\0\1\11\17\0\20\1"+
    "\1\0\1\11\3\1\1\0\1\1\1\0\22\1\12\0"+
    "\1\11\2\0\12\1\5\0\17\1\7\0\2\1\1\0"+
    "\1\11\6\1\2\0\1\1\2\0\10\1\1\0\1\11"+
    "\2\1\4\0\1\11\17\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private File output;
  private File tabelaIdentificadores;
  private FileWriter writerOutput;
  private FileWriter writerIdentificadores;
  private int idCount = 0;
  private Map<Integer, String> mapIdentifier = new HashMap<>();

  public void fecharWriters() throws IOException {
    this.writerOutput.close();
    this.writerIdentificadores.close();
  }

  private void imprimirId(String descricao, String lexema) throws IOException {
    int key = this.idCount;
	boolean exists = false;
    for (Map.Entry<Integer, String> entry : mapIdentifier.entrySet()) {
      if(entry.getValue().equals(lexema)) {
		key = entry.getKey();
		exists = true;
		break;
	  }
	}
	if (!exists) {
	  insertId(lexema); 
	  this.writerIdentificadores.append("key " + key + ": " + lexema + "\n");
	}
	System.out.println(lexema + " - " + "chave número " + key + " - " + descricao);
	this.writerOutput.append(lexema + " - " + "chave número " + key + " - " +  descricao + "\n");
  }
  
  private void imprimir(String descricao, String lexema) throws IOException {
    System.out.println(lexema + " - " + descricao);
    this.writerOutput.append(lexema + " - " + descricao + "\n");
  }
  
  private void insertId(String nome) {
	  mapIdentifier.put(idCount++, nome);
  }

  LexicalAnalyzer(java.io.Reader in, String inputname) throws IOException {
	String rootPath = Paths.get("").toAbsolutePath().toString();
	this.output = new File(rootPath + "\\" + inputname +" - output.txt");
	this.tabelaIdentificadores = new File(rootPath + "\\" + inputname +" - tabela de simbolos.txt");
	output.delete();
	output.createNewFile();
	tabelaIdentificadores.delete();
	tabelaIdentificadores.createNewFile();
	this.writerOutput = new FileWriter(this.output);
	this.writerIdentificadores = new FileWriter(this.tabelaIdentificadores);
	this.zzReader = in;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return ;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Caractere inválido " + yytext());
            }
            // fall through
          case 46: break;
          case 2:
            { 
            }
            // fall through
          case 47: break;
          case 3:
            { imprimir("Operador lógico", yytext());
            }
            // fall through
          case 48: break;
          case 4:
            { imprimir("Operador aritmético", yytext());
            }
            // fall through
          case 49: break;
          case 5:
            { imprimir("Operador de bits", yytext());
            }
            // fall through
          case 50: break;
          case 6:
            { imprimir("Parêntese aberto", yytext());
            }
            // fall through
          case 51: break;
          case 7:
            { imprimir("Parêntese fechado", yytext());
            }
            // fall through
          case 52: break;
          case 8:
            { imprimir("Separador vírgula", yytext());
            }
            // fall through
          case 53: break;
          case 9:
            { imprimir("Separador ponto", yytext());
            }
            // fall through
          case 54: break;
          case 10:
            { imprimir("Comentário", yytext());
            }
            // fall through
          case 55: break;
          case 11:
            { imprimir("Constante tipo número inteiro", yytext());
            }
            // fall through
          case 56: break;
          case 12:
            { imprimir("Separador dois-pontos", yytext());
            }
            // fall through
          case 57: break;
          case 13:
            { imprimir("Separador ponto e vírgula", yytext());
            }
            // fall through
          case 58: break;
          case 14:
            { imprimir("Operador comparativo", yytext());
            }
            // fall through
          case 59: break;
          case 15:
            { imprimir("Operador de atribuição", yytext());
            }
            // fall through
          case 60: break;
          case 16:
            { imprimir("Operador ternário", yytext());
            }
            // fall through
          case 61: break;
          case 17:
            { imprimir("Anotação do java", yytext());
            }
            // fall through
          case 62: break;
          case 18:
            { imprimirId("Identificador", yytext());
            }
            // fall through
          case 63: break;
          case 19:
            { imprimir("Colchete aberto", yytext());
            }
            // fall through
          case 64: break;
          case 20:
            { imprimir("Colchete fechado", yytext());
            }
            // fall through
          case 65: break;
          case 21:
            { imprimir("Chave aberta", yytext());
            }
            // fall through
          case 66: break;
          case 22:
            { imprimir("Chave fechada", yytext());
            }
            // fall through
          case 67: break;
          case 23:
            { imprimir("Operador unário", yytext());
            }
            // fall through
          case 68: break;
          case 24:
            { imprimir("Constante tipo string", yytext());
            }
            // fall through
          case 69: break;
          case 25:
            { imprimir("Constante tipo float", yytext());
            }
            // fall through
          case 70: break;
          case 26:
            { imprimir("Operador de shift", yytext());
            }
            // fall through
          case 71: break;
          case 27:
            { imprimirId("Método", yytext());
            }
            // fall through
          case 72: break;
          case 28:
            { imprimir("Palavra reservada " + yytext() + " (loop)", yytext());
            }
            // fall through
          case 73: break;
          case 29:
            { imprimir("Palavra reservada " + yytext() + " (desvio condicional)", yytext());
            }
            // fall through
          case 74: break;
          case 30:
            { imprimir("Constante de uma matriz", yytext());
            }
            // fall through
          case 75: break;
          case 31:
            { imprimir("Constante tipo char", yytext());
            }
            // fall through
          case 76: break;
          case 32:
            { imprimir("Estrutura de desvio condicional", yytext());
            }
            // fall through
          case 77: break;
          case 33:
            { imprimir("Palavra reservada " + yytext() + " (tipo)", yytext());
            }
            // fall through
          case 78: break;
          case 34:
            { imprimir("Palavra reservada " + yytext(), yytext());
            }
            // fall through
          case 79: break;
          case 35:
            { imprimir("Palavra reservada " + yytext() + " (exceção)", yytext());
            }
            // fall through
          case 80: break;
          case 36:
            { imprimir("Constante de um array", yytext());
            }
            // fall through
          case 81: break;
          case 37:
            { imprimir("Posição do array", yytext());
            }
            // fall through
          case 82: break;
          case 38:
            { imprimir("Estrutura de loop", yytext());
            }
            // fall through
          case 83: break;
          case 39:
            { imprimir("Palavra reservada " + yytext() + " (valor literal)", yytext());
            }
            // fall through
          case 84: break;
          case 40:
            { imprimir("Declaração de array", yytext());
            }
            // fall through
          case 85: break;
          case 41:
            { imprimir("Tipo não primitivo " + yytext(), yytext());
            }
            // fall through
          case 86: break;
          case 42:
            { imprimir("Estrutura de exceção", yytext());
            }
            // fall through
          case 87: break;
          case 43:
            { imprimir("Palavra reservada " + yytext() + " (modificador de acesso)", yytext());
            }
            // fall through
          case 88: break;
          case 44:
            { imprimir("Posição da matriz", yytext());
            }
            // fall through
          case 89: break;
          case 45:
            { imprimir("Declaração de matriz", yytext());
            }
            // fall through
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
